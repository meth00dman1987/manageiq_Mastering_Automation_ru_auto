[[tenancy_and_automate]]
== Аренда и автоматизировать

Поскольку CloudForms 4.0/Manageiq _capablanca_, все операции пользователей были выполнены в контексте арендатора, даже если мы не добавим своих новых арендаторов. Арендатор по умолчанию (то есть на верхнем уровне) известен как _tenant Zero_ (хотя на самом деле он имеет идентификатор арендатора 1), и все группы из ящика являются членами этого арендатора. Конечно, мы можем определить новых арендаторов и групп в нашей организации, которая затем составит иерархию арендатора под арендатором.

[[i1]]
. Арендаторская иерархия внутри организации
image::images/tenant_hierarchy.svg[Screenshot,700,align="center"]
{zwsp} +

Аренда очень полезна, если мы хотим подразделять нашу организацию в несколько полуавтономных подразделений, которые мы можем делегировать определенную степень авторитета и определить квоты. Мы создаем новые группы RBAC, добавляем наших пользователей в эти группы, а затем мы можем назначить группы арендаторам или проектам.

[NOTE]
====
_Project_ - арендатор, у которого нет собственных детей. Объект арендатора в Automate (см. << арендатор-object >>) имеет атрибут `$ evm.root ['арендатор']. Divisible ', который является` true' для обычного арендатора, но `false 'для проекта.
====

=== Tenant Visibility Rules

В соответствии с концепцией организационной делегирования, пользователи арендаторов имеют видимость некоторых инфраструктурных или облачных компонентов, которые были определены или созданы в других местах иерархии арендатора. Например, если мы обращаемся к << i1 >>, пользователь в арендаторе _europe) может видеть шаблоны VM или каталоги услуг, определенные в любом из _europe_, _sales_ или _bit63_ арендаторов, но не в _Engineering_, _north America_ или _scandinavia_ ilsants, net y ____wonder_wiTder_WIDGER_WIDGER_WIDGER_WIDGER_WIDTER_WIDGER_WIDGER_WIDGER_WIDGER_WIDGER_WITDER_W Тот же пользователь может видеть виртуальные машины, созданные в любой из арендаторов _europe_ или _scandinavia_.

Правила видимости арендатора определяются следующим образом:

==== Our Tenant

Следующие объекты, когда он создан арендатором, должны быть видны только в этом арендаторе:

* Автоматизируйте запросы
* Автоматизируя задачи

==== Parent Tenant

Если определено в родительском арендаторе, следующие объекты должны быть видны любому дочернему арендатору в его иерархии:

* Поставщики
* Автоматизируйте домены
* Каталоги обслуживания
* Служба каталога
* Шаблоны VM или облачные изображения

==== Child Tenant

Если создано в арендаторе ребенка, следующие объекты должны быть видны любому родителю -арендатору в филиале иерархии:

* Услуги
* VMS & Accest

Если создано в детском арендаторе, следующие объекты не должны быть видны ни одному родителю -арендатору в иерархии:

* Автоматизируйте домены

'''

[NOTE]
====
Правила видимости арендатора, определенные выше для виртуальных машин и шаблонов, применяются только в том случае, если роль группы пользователя имеет * VM & шаблон ограничения * установлено на _none_. Если мы установим ограничение доступа роли на _ только пользователя или групповой собственности_, ​​пользователь будет иметь видимость только виртуальных машин или шаблонов своей группы, как и ожидалось.

Связанный с тегом RBAC работает в пределах ограничений иерархии родителей-арендаторов/детей. Добавление метки видимости в виртуальную машину арендатора не делает виртуальную машину видимой вне этих правил иерархии арендатора, даже если группа в другой филиале иерархии арендатора определяется как имеющая одинаковую тег видимости.
====

=== Tenancy Within Automate

Все автоматические операции включают объект арендатора, который доступен как `$ evm.root ['endant']`. Этот объект содержит детали контекста арендатора для операции и включает такую ​​полезную информацию, как текущее распределение квот для процессоров, хранения и памяти для этого арендатора (см. Также ссылку: ../ provisioning_quota_management/gupt.asciidoc [Управление квотой подготовки]).

[[tenant-object]]
==== The Tenant Object

Следующее извлечение __object_walker__ показывает атрибуты, виртуальные столбцы и ассоциации объекта арендатора. с типичными значениями (объект не имеет собственных методов):

....
--- attributes follow ---
$ evm.root ['арендатор']. Ancestry = 1 (тип: строка)
$ evm.root ['endant']. default_miq_group_id = 17 (type: fixnum)
$ evm.root ['арендатор']. Description = Engineering (Type: String)
$ evm.root ['арендатор']. divisible = true (тип: trueclass)
$ evm.root ['арендатор']. Domain = nil
$ evm.root ['арендатор']. id = 2 (тип: fixnum)
$ evm.root ['endant']. Login_logo_content_type = nil
$ evm.root ['endant']. Login_logo_file_name = nil
$ evm.root ['endant']. Login_logo_file_size = nil
$ evm.root ['endant']. Login_logo_updated_at = nil
$ evm.root ['арендатор']. login_text = nil
$ evm.root ['endant']. logo_content_type = nil
$ evm.root ['арендатор']. logo_file_name = nil
$ evm.root ['арендатор']. logo_file_size = nil
$ evm.root ['endant']. logo_updated_at = nil
$ evm.root ['endant']. name = Engineering (тип: строка)
$ evm.root ['арендатор']. subdomain = nil
$ evm.root ['endant']. use_config_for_attributes = false (тип: falseclass)
--- end of attributes ---
--- virtual columns follow ---
$ evm.root ['endant']. Allocated_memory = 6442450944 (тип: fixnum)
$ evm.root ['endant']. Allocated_storage = 161061273600 (тип: fixnum)
$ evm.root ['endant']. allocated_vcpu = 3 (тип: fixnum)
$ evm.root ['endant']. display_type = арендатор (тип: строка)
$ evm.root ['endant']. parent_name = bit63 (type: string)
$ evm.root ['endant']. provisioned_storage = 167503724544 (тип: fixnum)
$ evm.root ['endant']. Region_description = Region 0 (тип: строка)
$ evm.root ['endant']. Region_number = 0 (type: fixnum)
--- end of virtual columns ---
--- associations follow ---
$ evm.root ['арендатор']. ae_domains (тип: ассоциация)
$ evm.root ['endant']. ext_management_systems (тип: ассоциация)
$ evm.root ['endant']. miq_groups (тип: ассоциация)
$ evm.root ['endant']. miq_request_tasks (тип: ассоциация)
$ evm.root ['арендатор']. miq_requests (тип: ассоциация)
$ evm.root ['арендатор']. miq_templates (тип: ассоциация)
$ evm.root ['арендатор']. провайдеры (тип: ассоциация (пустота))
$ evm.root ['endant']. service_templates (тип: ассоциация)
$ evm.root ['арендатор']. Услуги (Тип: Ассоциация)
$ evm.root ['endant']. Tenant_quotas (Тип: Ассоциация)
$ evm.root ['endant']. Пользователи (Тип: Ассоциация)
$ evm.root ['endant']. vm_or_templates (тип: ассоциация)
$ evm.root ['арендатор']. VMS (Тип: Ассоциация)
--- end of associations ---
....

Все полезные модели услуг, с которыми мы взаимодействуем, когда сценарии автоматизации (например, `miq_group`,` vm` или `service ', например), имеют атрибут` venant_id` и ассоциация «арендатора», которую мы можем использовать для определения владения арендатором или извлечь соответствующий объект арендатора.

==== Tenant Domains

Пользователь-арендатор с роли RBAC-администратора Evmrole-Administrator или эквивалент может создать специфичный домен для арендатора. Такие области полезны для создания рабочих процессов, специфичных для арендатора, или для переопределения более широких организационных схем автоматизации, таких как политика виртуальной машины.

Домен арендатора будет видим и редактируется для всех пользователей арендаторов, которые имеют доступ к Automate Explorer. Домен появится видимым, но заблокирован любым пользователям у детей -арендатора, которые имеют доступ к Automate Explorer.
[[i2]]
Аутомат просмотр просмотра от администратора инженерного домена
image::images/ss2.png[Screenshot,300,align="center"]
{zwsp} +

Домен не будет виден ни одному пользователям в родительском арендаторе, который имеет доступ к Automate Explorer (даже если у них есть роль RBAC Evmrole-super_administrator или эквивалент).

[[i3]]
Аутомат просмотр Explorer из супер -администратора домена Bit63
image::images/ss1.png[Screenshot,300,align="center"]
{zwsp} +

Домены арендаторов следуют тому же приоритетному порядку, что и любые другие домены автоматизации, хотя только разблокированные домены могут быть переупорядочены в приоритете.

==== Writing Automate Code to be Tenant-Aware

Хотя механизм автоматизации дает нам объект арендатора, на который можно ссылаться, двигатель не выполняет наш код в пределах ограничений RBAC нашего арендатора или правил видимости: [Дальнейший арендатор RBAC Enablement для автоматизации находится в разработке, и мы должны получить три новых метода `$ evm` в будущем. `rbac_enabled?`]. Например, `$ evm.vmdb (: vm). Все вернется нам в тот же нефильтрованный список виртуальных машин, независимо от того, из которого мы называем его.

Если мы хотим представить список существующих виртуальных машин или доступных шаблонов в диалоговом окне услуг арендатору, мы должны применить нашу собственную фильтрацию, связанную с арендатором, к нашему динамическому методу, чтобы правильные списки были представлены пользователям в разных арендаторах. Когда мы определяем каталог услуг в нашем арендаторе _bit63_, пользователь, просматривающий диалог в арендаторе _europe_, должен увидеть другой список виртуальной машины для пользователя в арендаторе _Engineering_, даже если они запускают один и тот же код.

К счастью, объект Арендатора имеет атрибут «Ancestry», который мы можем использовать. Значения происхождения для иерархии арендатора, показанная в << i1 >>, следующие:

[width="75%",cols="^33%,^33%,^33%",options="header",align="center"]
|=======================================================================
| Арендатор | Идентификатор арендатора | Арендатор происхождение
| Bit63 (арендатор ноль) | 1 | Nil
| Инжиниринг | 2 | "1"
| Продажи | 3 | "1"
| Wonder_widget | 4 | "1/2"
| Европа | 5 | "1/3"
| Северная Америка | 6 | "1/3"
| Scandinavia | 7 | "1/3/5"
|=======================================================================

===== Determining Visible Ancestral Tenants

Мы можем использовать атрибут «Ancestry», чтобы вычислить, какие предки арендаторов должны быть видны нашему арендатору, например, для определения списка «видимых» шаблонов инфраструктуры, которые присутствуют в раскрывающемся диалоговом языке:

[source,ruby]
----
def venant_infra_templates (tenant_id)
$ evm.vmdb (: template_infra). Где (: enanta_id => venant_id)
конец

def tenant_ancestor_ids (арендатор)
вернуть [], если arenant.ancestry.blank?
endant.ancestry.split ('/')
конец

def ancestor_infra_templates (арендатор)
Tenant_ancestor_ids (арендатор) .map {| t | Tenant_infra_templates (t)} .flatten
конец

def tenant_and_ancestor_infra_templates (арендатор)
Tenant_infra_templates (venant.id) + ancestor_infra_templates (арендатор)
конец
----

Мы можем назвать метод следующим образом:

[source,ruby]
----
Templates = tenant_and_ancestor_infra_templates ($ evm.root ['арендатор'])
----

===== Determining Visible Child Tenants

Мы также можем рассчитать, какие дочерние арендаторы должны быть видны нашему нынешнему арендатору. Мы могли бы сделать это, чтобы определить список виртуальных машин или услуг, которые должны быть видны нашему арендатору.

[source,ruby]
----
def tenant_child_ids (арендатор)
child_ids = []
Child_ids << renant.id.to_s # включите идентификатор этого арендатора
$ evm.vmdb (: арендатор)
Если только t.ancestry.blank?
Если t.ancestry.split ('/'). Включите? (Tenant.id.to_S)
child_ids << t.id.to_s
конец
конец
конец
Child_ids
конец
----

Затем мы можем использовать атрибут объекта VM `tenant_id`, чтобы соответствовать виртуальным машинам, которые видны этому пользователю арендатора, следующим образом:

[source,ruby]
----
child_ids = tenant_child_ids ($ evm.root ['арендатор'])
vms = $ evm.vmdb (: vm) .ll.select {| vm | child_ids.include? (vm.tenant_id.to_s)}
----

=== Summary

Эта глава показала, как мы можем использовать автоматизацию в нашу пользу, когда мы подчиняем нашу организацию в нескольких арендаторах. Мы можем позволить доменам-арендаторам создавать свои собственные домены автоматизации, позволяя им реализовать пользовательские рабочие процессы или переопределять настройки для всего предприятия, такие как схема именования виртуальной машины или политика размещения.

Мы также видели, как нам иногда нужно учитывать фильтрацию аренды, когда мы пишем наши сценарии автоматизации - особенно для методов динамического диалога - чтобы соответствовать правилам видимости.

Как супер-администраторы, мы должны проявлять определенную степень доверия, когда мы внедряем иерархию арендатора, особенно при добавлении пользователей с Evmrole-Administrator или эквивалентными правами на арендатора. Пользователь арендатора с доступом Webui к Automate Explorer может получить доступ к некоторым «глобальным» автоматическим объектам, и вывод `$ evm.log 'из любого арендатора всегда записывается в общий файл _automation.log_.




