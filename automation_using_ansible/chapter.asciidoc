[[automation_using_ansible]]
== Автоматизация с использованием ansible

CloudForms 4.1/Manageiq _DARGA_ представил возможность выполнения задач автоматизации с использованием Ansible Playbooks в дополнение к или вместо использования Native Ruby. Эта автоматизация требует наличия сервера Ansible Tower, добавленного в CloudForms или Manageiq в качестве поставщика управления конфигурацией.

'''
.Ruby или Ansible?
****
Одним из самых мощных функций Ansible в качестве инструмента управления конфигурацией является относительная простота и простота понимания своих пьес, формативных YAML. Добавление возможности иметь возможность запустить Ansible Playbooks от Automate, а также запуска Ruby Methods представляет нам дилемму; Когда использовать что?

Методы Ruby позволяют нам получить доступ и манипулировать всеми объектами и их свойствами в VMDB. У нас есть мощный язык сценариев в нашем распоряжении, который позволяет нам принимать решения в режиме реального времени в рамках нашего рабочего процесса автоматизации. Например, мы можем определить, сколько виртуальных машин в настоящее время работает на каждом гипервизоре в кластере, прежде чем принимать решения о размещении во время обеспечения. Недостаток заключается в том, что нам нужно быть довольно комфортно с языком сценариев Ruby и моделью Automate Object, чтобы в полной мере воспользоваться преимуществами и начать разработку наших собственных сценариев автоматизации.

Ansible Playbooks позволяют нам использовать силу библиотеки Ansible Module для взаимодействия со многими системами или компонентами инфраструктуры на нашем предприятии, которые могут не поддерживать инициативу CloudForms или ManageiQ (например, балансировщики нагрузки). Они позволяют нам делать это с использованием простого и хорошо документированного языка моделирования на основе YAML. Мы также можем воспользоваться множеством тысяч существующих ролей, которые можно загрузить с сноски веб -сайта Ansible Galaxy: [https://galaxy.ansible.com]

Независимо от того, используем ли мы методы Ruby или Ansible Playbooks, мы все равно можем воспользоваться некоторыми мощными автоматическими функциями, такими как государственные машины для создания наших рабочих процессов.
****
'''

=== Terminology

Когда мы используем Ansible для выполнения наших задач автоматизации, если помогает быть знакомым с некоторыми из терминологии Ansible Tower.

==== Playbooks

Пьесы - это конфигурация Ansible, развертывание и язык моделирования оркестровки. Каждая книжка состоит из одного или нескольких _plays_ в списке, и воспроизведение отображает группу хостов на одну или несколько четко определенных ролей или _tasks_.

Пьесы предназначены для того, чтобы быть читаемыми человеком и выражены в формате YAML. Пример фрагмента от простого воспроизведения, заключается в следующем:

{% сырой %}
---
Хозяева: веб -серверы
vars:
web_pkg: httpd
Firewall_pkg: Firewalld
Firewall_service: Firemethalld
Задачи:
- Имя: Установите необходимые пакеты
Yum:
имя:
- "{{web_pkg}}"
- "{{Firewall_pkg}}"
Состояние: Последний
- Имя: запустить и включить сервис {{Firewall_service}}}}
услуга:
Имя: "{{Firewall_service}}"
включено: true
Государство: начало
{ % endraw %}

Более продвинутые игроки разделили различные разделы (такие как определения переменной или обработчиков) на отдельные файлы, которые включены в основной файл Playbook. Это логическое разделение облегчает обслуживание и способствует повторному использованию.

==== Roles

Роли предоставляют Ansible способ загрузить задачи, обработчики и переменные из внешних файлов, основанные на известной структуре файлов. Присвоение роли группе хозяев (или набора групп или шаблонов хозяина и т. Д.) Подразумевает, что они должны реализовать конкретное поведение, то есть принять эту роль. Группирование контента по ролям также позволяет легко обмениваться ролями с другими пользователями.

Типичная структура каталогов может быть следующей:

```
роли/
Common/ # Эта иерархия представляет собой «роль»
Задачи/ #
main.yml # <- файл задач может включать меньшие файлы, если оправдано
обработчики/ #
main.yml # <- файл обработчиков
Шаблоны/ # <- файлы для использования с ресурсом шаблона
ntp.conf.j2 # <------- Шаблоны заканчиваются .j2
файлы/ #
bar.txt # <- файлы для использования с ресурсом копирования
foo.sh # <- файлы скрипта для использования с ресурсом сценария
vars/ #
main.yml # <- переменные, связанные с этой ролью
дефолты/ #
main.yml # <- по умолчанию переменные приоритетных приоритетов для этой роли
Мета/ #
main.yml # <- зависимости от роли
```

==== Projects

Проект представляет собой логическую коллекцию Ansible Playbooks (обычно в форме ролей), представленная в башне Ansible. Проекты часто хранятся в системе управления исходным кодом (SCM), такой как GIT, а Ansible Tower позволяет импортировать проекты непосредственно из SCM, и для того, чтобы код проекта был обновлен непосредственно перед тем, как работать, если это необходимо. Проекты хранятся в каталоге _/var/lib/awx/projects_ на сервере Ansible Tower.

Пример структуры каталога проектов может быть следующим:

```
project_name
Site.yml
webservers.yml
dbservers.yml
роли/
общий/
файлы/
шаблоны/
Задачи/
обработчики/
vars/
по умолчанию/
мета/
веб -серверы/
файлы/
шаблоны/
Задачи/
обработчики/
vars/
по умолчанию/
мета/
      ...
```
==== Job Templates

Шаблон работы - это определение и набор параметров для запуска работы Ansible Tower. Шаблоны рабочих мест позволяют нам выполнять одну и ту же работу много раз, предварительно определяя такие элементы, как воспроизведение для работы, дополнительные переменные для прохождения, инвентарь, которые должны управляться, и учетные данные, которые следует использовать. Типичное определение шаблона работы в башне Ansible показано в << i1 >>.

[[i1]]
.Typical Работа в башне Ansible
image::images/ss1.png[Screenshot,800,align="center"]
{zwsp} +

Шаблоны работы важны, когда мы обсуждаем интеграцию CloudForms/Manageiq с Ansible Tower, потому что шаблон работы - это организация, которую мы запускаем от автоматизации. << i2 >> показывает список шаблонов заданий Ansible Tower, отображаемых в Webui CloudForms.

[[i2]]
. Ansible Chapping Stempates, видимые в CloudForms
image::images/ss3.png[Screenshot,400,align="center"]
{zwsp} +

===== Extra Variables

Ansible Playbook переменные могут быть определены в ряде мест, но существует установленная приоритет, чтобы определить, какое значение используется при запуске пьесы. Если переменная с одинаковым именем определена в нескольких местах, будет использоваться вхождение, определяемое с наивысшим приоритетом (см. << Таблица 27A.1 >> Списка с приоритетом: [см. Http://docs.ansible.com/ansible/playbooks_variables.html#Variable-Recedence-wree-wread-wree-si-warible]).

[[table27a.1]]
. Ansible переменная приоритет
[width="50%",cols="^20%,^35%",options="header",align="center"]
|===================================================================
| Приоритет | где определено
| самый низкий приоритет | Роль по умолчанию
|-| Инвентаризация Vars
|-| Инвентаризация Group_vars
| --- | Инвентаризация host_vars
| ---- | Playbook Group_vars
| ----- | Playbook host_vars
| ------ | Факты хоста
| ------- | Play Vars
| -------- | Play vars_prompt
| --------- | Play vars_files
| ---------- | Зарегистрированные VARS
| ----------- | set_facts
| ------------ | Роль и включите VARS
| ------------- | Block vars (только для задач в блоке)
| -------------- | Задача VARS (только для задачи)
| Высокий приоритет | Дополнительные вар
|===================================================================

Мы видим, что дополнительные переменные имеют самый высокий приоритет, и мы можем определить значения по умолчанию для дополнительных переменных в шаблоне работы. Если параметр «Запуск» запуска * проверяется, мы также можем переопределить эти значения по умолчанию из CloudForms/Manageiq при запуске шаблона работы. Приоритет гарантирует, что наши динамически определенные переменные - это те, которые используются в Playbook.

==== Jobs

Работа - это случай, когда Ansible Tower запустила пьесу против инвентаря хозяев.

==== Inventories

Инвентарь определяет список управляемых хостов, против которых можно работать задачи. Инвентаризации могут содержать _groups_, которые дополнительно подразделяют хост в логические коллекции систем. Группы и их содержимое могут быть динамически сгенерированы с помощью сценария инвентаризации Ansible Tower (см. << i3 >>).

[[i3]]
. Определение инвентаризационной группы «все серверы» в Ansible Tower
image::images/ss2.png[Screenshot,700,align="center"]
{zwsp} +
 
Мы можем определить несколько различных запасов и использовать их в наших различных определениях шаблонов рабочих мест.

===== Update on Launch

Опция об обновлении * обновления на запуск * особенно важна, когда мы определяем динамические группы инвентаризации, на которые можно ссылаться из CloudForms или Manageiq Automate. Мы часто хотим назвать Ansible Tower Works как часть нашего рабочего процесса, поэтому нам нужен актуальный инвентарь, который содержит нашу недавно предоставленную виртуальную машину. Обновление настройки запуска * гарантирует, что инвентарь, определенная в шаблоне работы, всегда обновляется непосредственно перед запуском задания.

===== The Limit Variable

Многие шаблоны рабочих мест содержат пьесы, которые имеют ключ «хост», определяемый как «All». Когда мы выполняем задание из CloudForms или Manageiq, мы обычно хотим переопределить это и запустить задание в одной или нескольких конкретных системах, и встроенная переменная `Limit` позволяет нам.

Переменная `Limit` автоматически определяется для нас автоматической и передатой Ansible Tower с новым запросом на задание, если какие-либо из следующих двух атрибутов автоматизации содержат допустимые не-ноль значения:

[source,ruby]
----
$ evm.root ['vm']. Имя
----

или

[source,ruby]
----
$ evm.root ['miq_provision']. destination.name
----

Эти значения будут установлены, если мы вызовываем шаблон задания Ansible Tower либо из кнопки на объекте виртуальной машины, либо как часть рабочего процесса, обеспечивающего виртуальную машину (после создания виртуальной машины). Для этих двух общих случаев использования нам не нужно беспокоиться о определении ограничения сами.

=== Adding the ansible-remote User with a cloud-init Script

Поскольку Ansible использует SSH для подключения к управляемым серверам и запуска Playbooks, мы должны убедиться, что наши недавно предоставленные виртуальные машины настроены с учетными данными SSH, необходимыми для выполнения действий. Обычно считается хорошей практикой не подключаться к пользователю root, поэтому в примерах, описанных в этой книге, используется учетная запись, называемая «Ansible-Remote».

Если мы предоставляем шаблон «Fat», мы можем создать пользователя Ansible-Remote, используя шаблон настройки CloudForms/Manageiq CloudInit, вызываемый с * настройки * вкладки «Приготовление диалога».

Пример сценария облачного инимы для настройки вновь подготовленной виртуальной машины в качестве управляемого башни башни выглядит следующим образом:

```
#Cloud-Config

ssh_pwauth: true
DISABLE_ROOT: FALSE

Пользователи:
- по умолчанию
- Имя: Ansible-Remote
оболочка: /bin /bash
sudo: ['all = (all) nopasswd: all']
ssh_authorized_keys:
- ssh-rsa aaaab3n ... bit63.net

chpasswd:
Список: |
root: < %= miqpassword.decrypt (evm [: root_password]) %>
истекает: ложь

reverve_hostname: false
Manage_etc_hosts: true
fqdn: < %= evm [: hostname] %>
```

Мы создаем учетные данные Ansible Tower Machine, содержащий закрытый ключ, который соответствует этому открытому ключу, и мы можем указать эти учетные данные машины, когда мы определяем наши шаблоны работы.

[NOTE]
====
Мы также должны убедиться, что наши шаблоны виртуальных машин готовится с пакетом облака. Для Red Hat Enterprise Linux он установлен из репозитория * rhel-7-server-rh-common-rpms *.
====

=== Summary

В этой главе были представлены некоторые концепции и терминологию, с которыми мы сталкиваемся, когда используем мощные возможности Ansible Tower. В следующей главе мы рассмотрим новые функции автоматизации, которые позволяют нам создавать Ansible Tower Works в рамках наших рабочих процессов автоматизации.

==== Further Reading

https://docs.ansible.com [Ansible Documentation]
 
