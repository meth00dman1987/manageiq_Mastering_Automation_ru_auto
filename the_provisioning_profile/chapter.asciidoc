[[the-provisioning-profile]]
== Профиль подготовки

Как мы уже видели, некоторые из выборов или вариантов, связанных с автоматизацией процесса обеспечения виртуальных машин, должны быть сделаны в контексте запрашивающей группы управления доступом пользователя. Это позволяет нашему рабочему процессу автоматизации включать в себя логику обработки, специфичную для группы. Например, мы можем пожелать направить разработку и проверить виртуальные машины на определенное кластер или автоматически назвать некоторые виртуальные машины в соответствии с нашей собственной группой.

Атрибуты, названия отношений и методов, которые используются для определения этих операций и решений, хранятся в специфических для группы профили _provisioning_. Они включают в себя выбор соответствующего диалогового окна обеспечения, проверка запроса на предоставление квотой, необязательный рабочий процесс утверждения для больших запросов виртуальной машины и возможность использования специфических для группы методов именования виртуальных машин и распределения сети.

=== Location

Профили подготовки хранятся под _/{облако, инфраструктура}/vm/provisioning/profile_. Существует один необоснованный профиль группы для группы * evmgroup-super_administrator *, но мы можем создать новые профили для любых групп пользователей, из которых мы хотим предоставить. Если пользователь, который не является членом перечисленного профиля группы, будет использоваться профиль `.missing` (см. << i1 >>).

[[i1]]
.
image::images/ss1.png[Screenshot,350,align="center"]
{zwsp} +

=== Schema

Схема профиля подготовки содержит ряд атрибутов, отношений и методов (см. << i2 >>).

[[i2]]
. Имя и поля значения в схеме профиля
image::images/ss2.png[Screenshot,500,align="center"]
{zwsp} +

Каждый из них выбран с использованием сообщения, а атрибуты распространяются до `$ evm.root` в операции обеспечения с использованием _collect_ (см. << i3 >>).

[[i3]]
. Поля сбора и сообщения в схеме профиля
image::images/ss3.png[Screenshot,650,align="center"]
{zwsp} +

=== Customising the Profile

Профиль предназначен для того, чтобы быть использованным пользователем, и на самом деле мы часто добавляем профили для конкретных групп пользователей или редактируем профиль .missing`, чтобы удовлетворить обновленные методы именования виртуальных машин или модифицированные диалоги подготовки.

=== Profile Processing in Detail

Давайте подробно рассмотрим, как мы используем профиль подготовки группы при обеспечении виртуальной машины.

==== The Provisioning Dialog

Первый запрос профиля выполняется, как только запрашивающий пользователь выбирает шаблон для предоставления и нажимает кнопку «Продолжить *». WebUI должен запустить правильный диалог обеспечения для целевой платформы, типа операции и (необязательно) группы пользователей, и он определяет эту информацию из профиля.

В диалоговом окне «Обеспечение» представлен основной набор вкладок и элементов, которые подсказывают нам всю информацию, которую нам нужно предоставить имя виртуальной машины: vm, количество процессоров, VLAN и т. Д. (См. << i4 >>).

[[i4]]
.The provisioning dialog
image::images/ss4.png[Screenshot,700,align="center"]
{zwsp} +

Чтобы найти правильный диалог обеспечения для запуска, когда мы выбираем шаблон, и нажимаем кнопку «Продолжить *», экземпляр профиля запускается с использованием сообщений *get_pre_dialog_name *и *get_dialog_name *. Это действие запрашивает атрибуты * pre_dialog_name * и * dialog_name * и запускает метод _vm_dialog_name_prefix_. Имя диалога для загрузки собирается из замены времени выполнения переменных в строке "$ {#dialog_name_prefix} _ $ {/#dialog_input_request_type}".

[NOTE]
Запрос профиля на этом этапе выполняется классом Internal Rails _miqrequestworkflow_, а не методом, который мы можем увидеть в данных данных автоматизации


Мы можем увидеть выход в _evm.log_:

....
...Querying Automate Profile for dialog name
...Invoking [inline] method [.../Profile/vm_dialog_name_prefix] with inputs [{}]
...vm_dialog_name_prefix> Detected Platform:<redhat>
...vm_dialog_name_prefix> Platform:<redhat> \
dialog_name_prefix: <miq_provision_redhat_dialogs>
...
...Loading dialogs <miq_provision_redhat_dialogs_template> for user <admin>
....

==== VM Name (Pass 1)

Профиль запрашивается с использованием сообщения * get_vmname * для извлечения URI экземпляра, который будет использоваться для сформулирования имени виртуальной машины. Имя виртуальной машины сохраняется как переменная collect _vmname_.

Это имя виртуальной машины затем вставляется в текстовую строку, которая будет сформировать атрибут объекта запроса `description`` `` miq_provision_request.description`), например, «предоставление от [rhel7-generic] к [rhel7srv004]».

Если мы предоставляем два или более виртуальных машин в одном запросе и позволяя автоматическому обращению с автоматическим номером VM (например, RHEL7SRV005, RHEL7SRV006 ... и т. Д.), то описание объекта запроса является более общим, например, «предоставление от [RHEL7-Generic] до [RHEL7SRVXXX]».

==== Approval

Как только объект запроса создается, мы начинаем серию этапов обработки, основанных на событиях на основе экземпляров в _/system/police_ (см. << i5 >>).

[[i5]]
.Miqprovision, связанные с политикой
image::images/ss5.png[Screenshot,370,align="center"]
{zwsp} +

Первый из них запускается, - это _miqprovisionrequest_created_. Он содержит два отношения, первое из которых запрашивает профиль, используя сообщение * get_auto_proval_state_machine *, чтобы получить имя машины состояния, которое будет использоваться для обработки процесса автоматического одобрения. Второе отношение запускает экземпляр _default_ этой машины состояния.

===== Approved, Pending or Denied

В зависимости от результатов процесса утверждения (одобренного, ожидающего или отказа), заявитель отправляется электронное письмо по соответствующим экземплярам события/политики.

==== Quota

Следующий экземпляр политики, управляемый событиями, должен быть запускается _miqprovisionrequest_starting_. Этот экземпляр политики содержит единственное отношение к машине _/system/commonmethods/Quatastatemchine/Quata_.

После того, как квота была проверена и передана, запрос продолжает обработку, и создаются объекты задачи.

==== VM Name (Pass 2)

Профиль снова запрашивается с использованием сообщения * get_vmname * для извлечения URI экземпляра, который будет использоваться для сформулирования имени виртуальной машины для подготовки. Этот второй вызов выполняется при обработке запроса на подготовку как часть создания _tasks_, который будет обрабатывать предоставление каждой виртуальной машины в запросе. Имя виртуальной машины сохраняется как переменная collect _vmname_.

Полученное имя виртуальной машины добавляется в параметры объекта задачи как `miq_provision.options [: vm_target_name]` и `miq_provision.options [: vm_target_hostname]`. Это выполняется один раз на объект задачи (может быть несколько объектов задачи, созданного для одного объекта запроса).

==== VM Provisioning State Machine

Наконец, профиль используется задачей обеспечения для определения экземпляра машины состояния, который будет использоваться для предоставления виртуальной машины. Вызов выполняется в _/инфраструктуру/VM/LifeCycle/Provisioning#CREATE_.

Этот экземпляр содержит два отношения, первое - _/инфраструктура/vm/provisioning/profile/$ {/#user.normalized_ldap_group} #get_state_machine_. Это запрашивает профиль, используя сообщение * get_state_machine *, чтобы получить имя класса машины состояния, которое будет использоваться для обработки обеспечения виртуальной машины. Имя класса State Machine сохраняется как переменная Collect _state_machine_.

Второе отношение - _/инфраструктура/vm/provisioning/statemachines/$ {/#state_machine}/$ {/#miq_provision.provision_type} _. Это использует переменную _state_machine_, полученную из Collect в предыдущих отношениях, и запускает экземпляр этой машины состояния, имя которой соответствует переменной замене для `miq_provision.provision_type`. При выполнении клона VM из шаблона (наиболее распространенной операции по обеспечению виртуальной машины) это будет «шаблон».

=== Summary

В этой главе мы видели, как выборы для контроля доступа производятся в рамках рабочего процесса автоматизации виртуальной машины. Профили подготовки позволяют нам значительную гибкость в настройке рабочего процесса, чтобы учитывать специфичные для группы варианты, которые мы могли бы сделать.

Концепция использования группового профиля для хранения специфических для группы параметров не ограничивается обеспечением виртуальной машины. Он также используется для предоставления услуг, и мы создаем групповой профиль для обработки нашего рабочего процесса по утверждению запроса на автоматизацию в ссылке: ../ Automation_Request_pesproval/gupt.asciidoc [утверждение запроса автоматизации].

==== Further Reading

http://manageiq.org/pdf/manageiq-0-provisioning_virtual_machines_and_hosts-en-us.pdf= Провизирование виртуальных машин и хостов]
