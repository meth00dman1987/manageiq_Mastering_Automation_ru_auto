[[creating-a-service-catalog-bundle]]
== Создание пакета каталога обслуживания

Мы изучили в ссылке: ../ COMERICE_A_SERVICE_CATALOG_ITEM/gupt.asciidoc [Создание элемента каталога сервиса] Как создавать элементы каталога сервисов, которые позволяют нашим пользователям предоставлять полностью настроенные виртуальные машины из одной кнопки «Порядок».

Мы можем заполнить наш каталог услуг полезными предметами (см. << i1 >>).

[[i1]]
Каталог.
image::images/ss1.png[Screenshot,600,align="center"]
{zwsp} +

В этих примерах виртуальные машины предоставляются из полностью установленных шаблонов VMware, предварительно настроенных с пакетами приложений. Диалог службы чисто подсказывает для службы и имен виртуальных машин (см. << i2 >>).

[[i2]]
Диалог.
image::images/ss2.png[Screenshot,400,align="center"]
{zwsp} +

Следующим логическим шагом является возможность предоставить несколько элементов вместе в качестве единого __service Catalog Bundle__.

=== Creating the Service Dialog for the Bundle

Когда мы создаем пакет каталога услуг, мы обрабатываем вход диалога для каждого из элементов каталога в одном диалоговом окне обслуживания, который мы создаем для пакета. Для нашего сети, промежуточных и баз данных элементов сервера данных мы должны запрашивать имя виртуальной машины каждого, но мы также предпринимаем для имени службы (см. << i3 >>).

[[i3]]
Диалог.
image::images/ss3.png[Screenshot,400,align="center"]
{zwsp} +

Мы называем элементы диалога в соответствии с последовательности, в которой мы хотим, чтобы наши отдельные элементы были предоставлены. Наша последовательность будет:

1. Сервер базы данных
2. промежуточный сервер
3. Веб -сервер

Поэтому наши четыре диалогового элемента построены следующим образом. Мы создадим элемент текстового поля для запроса на имя службы (см. << i4 >>).

[[i4]]
.Dialog element для подсказки для имени службы
image::images/ss4.png[Screenshot,400,align="center"]
{zwsp} +

Мы добавляем второй элемент текстового поля для запроса имени веб -сервера (см. << i5 >>).

[[i5]]
.Dialog element для запроса имени веб -сервера
image::images/ss5.png[Screenshot,400,align="center"]
{zwsp} +

Мы добавляем третий элемент текстового поля, чтобы запустить имя сервера промежуточного программного обеспечения (см. << i6 >>).

[[i6]]
.Dialog Element, чтобы запросить имя сервера промежуточного программного обеспечения
image::images/ss6.png[Screenshot,400,align="center"]
{zwsp} +

Наконец, мы добавляем четвертый элемент текстового поля для запроса на имя сервера базы данных (см. << i7 >>).

[[i7]]
.Dialog Element для запроса имени сервера базы данных
image::images/ss7.png[Screenshot,400,align="center"]
{zwsp} +

Число в имени элемента отражает номер последовательности, а методы _catalogiteminitialization_ и _catalogbundleinialization_ Используют этот номер последовательности для передачи значения диалога в правильный дедушка miq_request_task (см.

Значение * option_ <n> _vm_name * распознается и специально связано с помощью _catalogiteminitialization_, который устанавливает ключи `: vm_target_name` и`: vm_target_hostname` в вариантах miq_request_task для ввода значения.

Ключ `: vm_target_name` устанавливает имя полученной виртуальной машины.

Ключ `: vm_target_hostname` может использоваться для внедрения Linux _hostname_ (т.е. fqdn) в спецификацию настройки VMware, которая затем может установить это в виртуальной машине, используя инструменты VMware на FirstBoot.

=== Preparing the Service Catalog Items

Поскольку мы будем обрабатывать ввод диалога при заказе пакета, нам нужно отредактировать каждый элемент каталога, чтобы установить каталог *на *<unascigned> *и *диалог *на *<no Dialog> *. Мы также _deselect_ Опция * Дисплей в каталоге *, поскольку мы больше не хотим, чтобы этот элемент был индивидуально упорядочен (см. << i8 >>).

[[i8]]
. Постановка существующих элементов каталога услуг
image::images/ss8.png[Screenshot,700,align="center"]
{zwsp} +

Как только мы это сделаем, элементы появятся как ** незнашиваемые ** (см. << i9 >>).

[[i9]]
. Несоответственные элементы каталога
image::images/ss9.png[Screenshot,280,align="center"]
{zwsp} +

=== Creating the Service Catalog Bundle

Теперь мы можем пойти дальше и создать наш пакет каталога. Выделите имя каталога и выберите ** Конфигурация -> Добавьте новый пакет каталога ** (см. << i10 >>).

[[i10]]
. Выдвигая новый пакет каталога
image::images/ss10.png[Screenshot,500,align="center"]
{zwsp} +

Введите имя и описание для пакета, затем выберите флажок «Дисплей в каталоге». Выберите соответствующий каталог и недавно созданный диалог пакета, из соответствующих раскрываний.

Для подготовки точки входа перейдите к __manageiq/service/provisioning/statemachines/serviceprovision_template/catalogbundleinialization__ (см. << i12 >>).

[[i12]]
. Service Bundle Basic Info
image::images/ss11.png[Screenshot,700,align="center"]
{zwsp} +

Нажмите на вкладку «Подробности» * и введите немного HTML-форматированного текста, чтобы описать элемент каталога всем, кто просматривает в каталоге.

[source,html]
----
<h1> Трировный пакет интрасети -сервера </h1>
<hr>
<p> развернуть <strong> web, промежуточное программное обеспечение </strong> и <strong> база данных </strong>
сервер вместе как единая служба </p>
----

Нажмите на вкладку «Ресурсы» * и выберите каждый из трех незнашиваемых элементов каталога, чтобы добавить их в пакет (см. << i13 >>).

[[i13]]
.Dling resources в пакет
image::images/ss12.png[Screenshot,450,align="center"]
{zwsp} +

Измените * Заказ * и * PRESISIONing ORDER * В соответствии с нашей желаемой последовательности ('3' не будет виден, пока '2' не будет установлен для опции) См. << I14 >>. Последовательность должна соответствовать последовательности * option_ <n> _vm_name *, которая мы дали наши элементы диалога.

[[i14]]
. Настройка заказов на действие и предоставление
image::images/ss13.png[Screenshot,700,align="center"]
{zwsp} +

Наконец нажмите кнопку «Добавить *».

Выберите значок подходящего размера для пользовательского изображения и сохраните.

=== Ordering the Catalog Bundle

Перейдите в раздел «Каталог * сервисов» * в аккордеоне, расширите каталог * Intranet * и выделите пакет Catalog Server * Trier Intranet * (см. << I16 >>).

[[i16]]
. Заказвание пакета каталога
image::images/ss14.png[Screenshot,,align="center"]
{zwsp} +

Нажмите ** Заказ ** и заполните значения диалога службы (см. << I17 >>).

[[i17]]
. Включение имен услуг и серверов в диалоговом окне службы
image::images/ss15.png[Screenshot,400,align="center"]
{zwsp} +

Нажмите *отправить *

После новых минут новая услуга должна быть видна в ** My Services **, содержащих новые виртуальные машины (см. << i18 >>).

[[i18]]
. Заполненная служба
image::images/ss16.png[Screenshot,650,align="center"]
{zwsp} +

Если бы мы не смотрели порядок, в котором были созданы виртуальные машины, мы могли бы посмотреть в базе данных, чтобы убедиться, что наша желаемая последовательность обеспечения была соблюдена:

....
vmdb_production =# select id, имя из порядок виртуальной машины от id asc;
id |                     имя
---------------+----------------------------------------------
...
1000000000177 | JST-DB01
1000000000178 | JST-MID01
1000000000179 | JST-WEB01
....

Здесь мы видим, что виртуальные машины были созданы (и названы) в правильном порядке.

=== Summary

Это был полезный пример, который показывает гибкость каталогов обслуживания для развертывания всего приложений. Когда мы связываем эту концепцию с инструментом управления конфигурацией, таким как Puppet, работающая со спутника Red Hat 6, мы начинаем действительно видеть мощность автоматизации в нашем предприятии. Мы можем развернуть сложные рабочие нагрузки с одной кнопки нажатия.

Одна из интересных функций сервисных связков заключается в том, что мы можем смешивать и сопоставлять элементы каталога, которые предоставляют в разных поставщиках. Например, у нас может быть бимодальная ИТ-сноска: [http://www.gartner.com/it-glossary/bimodal/] инфраструктура, включающая RHEV для наших традиционных рабочих нагрузок режима 1, и внутреннее открытое частное облако для наших более готовых к облаку. Используя сервисные пакеты, мы могли бы предоставить наши относительно статические серверы в RHEV, а наши динамически масштабируемые серверы среднего уровня и фронтальных серверов в OpenStack.

==== Further Reading

http://talk.manageiq.org/t/filtering-out-service-catalog-items-duging-deployment/725* Нарушение элементов каталога обслуживания во время развертывания]
