[[creating-a-service-catalog-item]]
== Создание элемента каталога услуг

В этой главе мы рассмотрим шаги, связанные с созданием элемента каталога услуг, чтобы предоставить виртуальную машину в виртуализацию Red Hat Enterprise (RHEV). Мы создадим диалоговое окно службы, который позволяет пользователю указать имя как для новой виртуальной машины, так и для службы, и указать количество процессоров и размер памяти представленной виртуальной машины из раскрывающегося списка.

[NOTE]
Хотя для этого примера мы будем подготовлены к RHEV, та же процедура может быть использована для создания элемента каталога услуг для предоставления другим поставщикам.

=== The Service Dialog

Мы собираемся создать диалоговое окно обслуживания, чтобы запросить количество процессоров и объем памяти для новой виртуальной машины. Эти две характеристики будут добавлены в объект задачи обеспечения для новой виртуальной машины, и мы знаем, что такие элементы хранятся в хэшах вариантов объекта задачи для выполнения. Машина состояния _catalogiteminitialization_ может обрабатывать вставку наших значений диалога в хэш параметров для нас, если мы правильно назваем наши элементы диалога.

==== Finding the Correct Element Names

Мы видели по ссылке: ../ catalogitembundleinialization/gupt.asciidoc [Catalog {item, bundle} инициализация], что _catalogiteminitialization_ распознает и специально использует некоторые названия элементов, включая*vm_name*и ** service_name **, поэтому мы можем создать два из наших элементов с этими именами. Если это все, что мы хотим попросить, то мы можем перейти прямо к созданию диалога услуг.

Однако для нашего варианта использования мы также предлагаем количество процессоров и размер памяти. Любые поля диалога услуг, которые мы создаем с намерением изменить окончательную конфигурацию виртуальной машины (например, количество процессоров или размер памяти), также должны быть названы определенным образом. Имя элемента должно соответствовать ключу в хэшах с вариантами задачи, которые мы хотим перезаписать.

Мы можем найти это ключевое имя любым из двух способов; Изучив код YAML, который составляет диалог подготовки, или выполняя интерактивное положение виртуальной машины и изучив варианты подготовки вариантов задачи в течение процесса обеспечения.

===== Searching the Provisioning Dialog

Самый простой способ поиска диалогов подготовки - это скопировать соответствующую, редактировать, затем выберите и вставить содержимое в плоский файл, который может быть оторван, т. Е.

....
grep -i "память \ | cpu \ | core \ | socket" miq_provision_redhat_dialogs_template.yaml
      :number_of_sockets:
        :description: Number of Sockets
      :cores_per_socket:
        :description: Cores per Socket
      :vm_memory:
        :description: Memory (MB)
....

Это показывает, что нам, вероятно, нужно назвать наши элементы _cores_per_socket_ и _vm_memory_.

===== Examining the options hash during provisioning

В качестве альтернативы (или подтверждения) для поиска ключевых имен из диалога обеспечения, мы можем использовать один из методов, которые мы выучили в ссылке: ../ nesveligative_debugging/gace.asciidoc [следственная отладка], чтобы сбросить содержимое вариантов предоставления задач во время нормального интерактивного положения. Вот пример вызова _object_walker_ после * PostProvision * Stage в стадии _vmprovision_vm/template_ matchan (см. << i1 >>).

[[i1]]
.State добавлен в машину VM Provisioning для запуска Object_Walker
image::images/ss1.png[]
{zwsp} +

Используя _object_walker_reader_ После того, как мы предоставили виртуальную машину, мы видим, что те же значения находятся в параметрах задачи miq_provision hash:

....
Object_walker_reader.rb | grep 'miq_provision' | grep "память \ | cpu \ | core \ | socket"
|    $ evm.root ['miq_provision']. Options [: cores_per_socket] = [1, "1"]
|    $ evm.root ['miq_provision']. Options [: memory_reserve] = nil
|    $ evm.root ['miq_provision']. Options [: number_of_sockets] = [1, "1"]
|    $ evm.root ['miq_provision']. Options [: vm_memory] = ["1024", "1024"]
....

===== Some commonly used element names

В следующей таблице перечислены некоторые обычно используемые имена элементов для типичных характеристик виртуальной машины, которые можно изменить из диалогового окна службы:

[cols="^,^",options="header",]
|=======================================================
| VM Характеристика для изменения | Имя элемента
| Vm name | vm_name
| Количество процессоров | cores_per_socket &/или number_of_sockets
| Vm memory | vm_memory
| Корневой пароль | root_password
| MAC -адрес (первый NIC) | Mac_Address
| IP -адрес (первый NIC) | IP_ADDR
| OpenStack Flavor | ancess_type
|=======================================================

[NOTE]
====
Любое из значений хэша параметров, которые устанавливают параметр внутри операционной системы виртуальной машины (например, *root_password *или *ip_addr *), нуждается в механизме для внедрения этих параметров в виртуальную машину после его загрузки. Обычно мы делаем это, используя спецификацию настройки VMware в сочетании с инструментами VMware или облачным инициалом.

Мы можем определить сценарий Template Cloud -INIT, который содержит переменные замещения (из * инфраструктуры -> pxe * в веб -и). Наше значение от `options [: root_password]` будет заменено в клонированную версию этого скрипта во время выполнения и используется, когда Cloud_init выполняется в госте.

....
...
< % root_password = evm [: root_password] %>
chpasswd:
Список: |
Корень: <%= root_password%>
истекает: ложь
...
....
====
==== Creating the Service Dialog

Из предыдущего расследования мы знаем, что мы должны назвать элементы диалога нашего сервиса: ** vm_name **, ** service_name **,*option_0_cores_per_socket*и ** option_0_vm_memory **.

Мы создадим новый диалог службы под названием _RHEL7 VM_. Наш новый диалог службы будет похож на пример, который мы создали в ссылке: ../ Working_with_virtual_machines/grap.asciidoc [работа с виртуальными машинами], но на этот раз мы создадим два ящика: ** Служба и имена виртуальных машин ** и ** характеристики виртуальной машины **, каждый из которых содержат два элемента (см. << i2 >>).

[[i2]]
Диалог.
image::images/ss2.png[Screenshot,400,align="center"]
{zwsp} +

Имя*и имя службы*и*vm name*Элементы в первом поле имеют тип ** текстовое поле ** и имеют имена*service_name*и*vm_name*соответственно.

*Количество CPU*элемента во втором поле имеет тип ** раскрывающегося списка ** (см. << i3 >>).

[[i3]]
.
image::images/ss3.png[Screenshot,400,align="center"]
{zwsp} +

Мы заполним этот список опциями на один, два или четыре процессора (см. << i4 >>).

[[i4]]
Определение выбора доступных процессоров
image::images/ss4.png[Screenshot,500,align="center"]
{zwsp} +

Элемент*vm memory*во втором поле имеет тип ** раскрывающегося списка ** (см. << i5 >>).

[[i5]]
.VM Элемент памяти
image::images/ss5.png[Screenshot,400,align="center"]
{zwsp} +

Мы заполним этот список опциями для предоставления 1,2,4 или 8 ГБ памяти (см. << i6 >>).

[[i6]]
. Определение выбора доступной памяти
image::images/ss6.png[Screenshot,500,align="center"]
{zwsp} +

=== Creating the Service Catalog Item

Нам нужно создать элемент каталога услуг, но мы также создадим новый _service Catalog_, чтобы поместить элемент.

==== Create a Catalog

Первое, что мы должны сделать, это создать каталог услуг для хранения предмета обслуживания. У нас может быть много каталогов; Они используются для организации или классификации наших предметов обслуживания и пакетов.

Перейдите в раздел * Каталоги * в аккордеоне и выберите * Configuration -> добавьте новый каталог * (см. << i7 >>).

[[i7]]
. Добавление нового каталога
image::images/ss7.png[Screenshot,620,align="center"]
{zwsp} +

Дайте каталогу имя (для этого примера мы будем использовать «общие серверы»), оставить все остальное по умолчанию и нажмите *Добавить *.

==== Creating the Catalog Item

Перейдите к разделу * Cataloge Atements * В аккордеоне, выделите недавно созданные * универсальные серверы * каталог, затем выберите * Configuration -> Добавить новый элемент каталога * (см. << i8 >>).

[[i8]]
. Выдвигая новый элемент каталога
image::images/ss8.png[Screenshot,700,align="center"]
{zwsp} +

Выберите * rhev * из типа «КАКАЛОГ» Тип * Диспасный список (см. << i9 >>).

[[i9]]
. Выбор типа элемента каталога
image::images/ss9.png[Screenshot,450,align="center"]
{zwsp} +

Введите имя и описание для элемента каталога и выберите «Дисплей» в каталоге *, чтобы обнажить оставшиеся поля, которые будут заполнены. Выберите наши вновь созданные * универсальные серверы * Каталог и * диалог rhel7 vm * в соответствующих раскрытиях. Для подготовки точки входа перейдите к _manageiq/service/provisioning/statemachines/serviceprovision_template/catalogiteminitialization_ (см. << i10 >>).

[[i10]]
.
image::images/ss10.png[Screenshot,700,align="center"]
{zwsp} +

Нажмите на вкладку «Подробности» * и введите несколько HTML-форматированных текстов, чтобы описать элемент каталога всем, кто просматривает в каталоге:

[literal]
----
<h1> generic rhel 7 сервер </h1>
<hr>
<p> Этот элемент каталога будет развернуть <strong> red Hat Enterprise Linux 7 </strong>
Сервер, построенный из набора пакетов @Base, и исправлено до 01-марта-2016.

Выбор количества процессоров и размер памяти может быть сделан при заказе </p>
----


Нажмите на вкладку «Запрос» * и заполните подробности. Выберите соответствующий шаблон и ** среда **, ** Аппаратное обеспечение **,*Сеть*Настройки вкладки, которые, как известно, работают, когда виртуальная машина предназначена в интерактивном отношении (см. Имя виртуальной машины будет перезаписано во время процесса обеспечения, поэтому здесь мы просто устанавливаем его как _Changeme_ (см. << i11 >>).

[[i11]]
.
image::images/ss11.png[Screenshot,600,align="center"]
{zwsp} +

Наконец нажмите кнопку «Добавить *».

Выберите значок подходящего размера для пользовательского изображения и сохраните.

=== Ordering the Catalog Item

Перейдите в раздел * Catalogs * Service * в аккордеоне, разверните * Generic Servers * Catalog и выделите * универсальный сервер RHEL 7 (TREV) * элемент каталога (см. << I12 >>).

[[i12]]
.
image::images/ss12.png[Screenshot,700,align="center"]
{zwsp} +

Нажмите ** Заказ ** и заполните значения диалога службы (см. << I13 >>).

[[i13]]
.
image::images/ss13.png[Screenshot,420,align="center"]
{zwsp} +

Нажмите *отправить *

После новых минут новая услуга должна быть видна в *My Services *, содержащих новую виртуальную машину (см. << i14 >>).

[[i14]]
. Закончание обслуживания
image::images/ss14.png[Screenshot,450,align="center"]
{zwsp} +

Если мы рассмотрим детали виртуальной машины, мы увидим, что она была создана с помощью нашего запрошенного количества процессоров и размера памяти (см. << I15 >>).

[[i15]]
. Конфигурация конфигурации виртуальной машины
image::images/ss15.png[Screenshot,450,align="center"]
{zwsp} +

=== Summary

В этом примере описывается процедура создания элемента каталога услуг для предоставления одной виртуальной машины. Мы можем следовать той же процедуре, чтобы заполнить каталог услуг многими типами виртуальной машины, как Windows, так и Linux. Хотя диалог услуг, используемый в этом примере, был довольно простым, он типичен для многих общих сервисов, которые мы можем создать для наших пользователей. Мы можем добавить дополнительные элементы диалога, но мы должны быть осторожны, чтобы сбалансировать компромисс между простотой дизайна и представлением дополнительного выбора нашим пользователям. Использование динамических элементов может помочь в этом отношении. Они позволяют нам создавать диалоги с «интеллектуальными» элементами, которые предлагают сокращенный выбор вариантов, отфильтрованные релевантностью для запрашивающего пользователя. Вместо того, чтобы предлагать раскрывающийся список всех возможных сетей, чтобы предоставить, например, виртуальную машину, мы могли бы фильтровать на основе запрашивающего членства в группе пользователя или на основе ввода из другого элемента диалога, указывающего на то, что виртуальная машина должна быть помечена как _development_.

