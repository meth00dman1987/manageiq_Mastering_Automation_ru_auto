[[creating-an-ansible-tower-service-catalog-item-and-bundle]]
== Создание Ansible Tower Service Catalog и пакет

В этой главе мы заведем практические примеры создания индивидуального элемента каталога башни, а также пакет каталога, включающий Ansible Tower Service.

=== Service Catalog Item

Сначала мы создадим элемент каталога услуг для запуска шаблона задания «Простой ламп», который мы разработали в ссылке: ../ range_an_ansible_tower_job_from_a_button/gupt.asciidoc [работа с Ansible Tower с кнопкой].

==== Service Dialog

Нам необходимо повторно импортировать шаблон работы «простой стек лампа» в качестве диалога услуг, как мы делали ранее, но на этот раз мы оставим поле «Параметры» и элемент «предел» на месте. Мы используем лимитный элемент, чтобы назвать виртуальную машину, на которой мы хотим запустить Сервис. Еще раз мы редактируем каждый элемент в диалоговом окне, чтобы отменить флажок «Читать только», а затем, наконец, сохраните новый диалог службы как «Simple Lamp Stack (Service)» (см. << i1 >>).

[[i1]]
.New Service Dialog
image::images/ss1.png[Screenshot,380,align="center"]
{zwsp} +

==== Catalog Item

Мы создадим новый элемент каталога услуг, как и раньше, но на этот раз тип элемента каталога будет «AnsibleTower». Мы завершаем определение элемента каталога, как показано в << i2 >>.

[[i2]]
. Ansable Tower Kataloge Item
image::images/ss2.png[Screenshot,700,align="center"]
{zwsp} +

Мы выберем __statemachines/provision/default__ State Machine в качестве нашей точки входа.

==== Ordering the Catalog Item

После создания мы можем заказать наш новый элемент из каталога услуг. Мы увидим новое диалог услуг, который мы завершаем подходящими значениями (см. << i3 >>).

[[i3]]
. Заказ на предмет каталога
image::images/ss3.png[Screenshot,450,align="center"]
{zwsp} +

Когда мы нажимаем на * отправить * запрос на работу передается в Башню, и мы можем следовать прогрессу нашей работы в Tower Webui.

=== Service Catalog Bundle

Теперь мы создадим пакет услуг, включающий элемент каталога VM, за которым следует элемент каталога Ansible Configuration. Мы адаптируем предмет каталога Ansible, который мы только что создали, чтобы сделать его подходящим для использования в рамках пакета.

==== Service Dialog

Мы отредактируем диалоговое окно «Сервисная служба« Простой ламп », чтобы удалить поле« Параметры »и элемент« Limit ». Мы добавим новую коробку под названием «Служба и сведения о виртуальной машине», содержащий два элемента текстового окна с именем «Имя службы» и имя виртуальной машины (как мы делали в ссылке: ../ COMERICE_A_SERVICE_CATALOG_ITEM/gupt.asciidoc [Создание элемента каталога службы]). Элемент с меткой «Имя службы» должно иметь имя "Service_Name". Элемент с меткой «Имя виртуальной машины» должно иметь имя «Опция_1_VM_NAME». Мы сохраним новый диалог Service как «Centos 7 Lamp Server Bundle» (см. << i4 >>).

[[i4]]
. Модифицированный диалог обслуживания
image::images/ss4.png[Screenshot,420,align="center"]
{zwsp} +

===== Limit Switch

Нам по -прежнему нужен способ передачи правильного ограниченного переключения на башню Ansible, когда задание запускается. Для простого диалога мы могли бы оставить элемент «предельного» в качестве статического текстового поля или динамически заполненного текстового поля со значением по умолчанию с ввода в элемент «Имя виртуальной машины». Однако для этого примера мы будем использовать наши знания о методах автоматизации, связанных с ANSIBLE, для динамического установления предельной переменной (см. << Автоматически устанавливающихся по-видимому >> ниже).

==== Ansible Tower Catalog Item

Мы сделаем два небольших изменения в предмет каталога Ansible Tower. Мы не откроем диалоговое окно и изменим точку входа в подводную точку на __statemachines/provision/provision_from_bundle__ State Machine. Модифицированное определение элемента каталога показано в << i5 >>.

[[i5]]
. Модифицированный элемент каталога башни Ansible
image::images/ss5.png[Screenshot,700,align="center"]
{zwsp} +

==== Creating the Service Catalog Bundle

Теперь мы можем пойти дальше и создать наш пакет каталога, как мы делали в ссылке: ../ Создание_A_SERVICE_CATALOG_BUNDLE/ГЛАВА.ASCIIDOC [Создание пакета каталога услуг]. Мы будем использовать ту же точку входа в подготовку __manageiq/service/provisioning/statemachines/serviceprovision_template/catalogbundleinitialization__. Когда мы выберем ресурсы для пакета, мы выберем общий элемент каталога «Centos 7.2 Server» в качестве виртуальной машины, который будет представлен, и наш недавно измененный элемент каталога конфигурации «простой лампы». Мы должны убедиться, что порядок действий и порядок предоставления установлений устанавливался, чтобы шаблон задания был успешно выполнен Ansible шаблон работы после успешного предоставления виртуальной машины. (См. << i6 >>).

[[i6]]
.Bundle Resources
image::images/ss6.png[Screenshot,700,align="center"]
{zwsp} +

[[automatically-setting-the-limit-variable]]
==== Automatically Setting the Ansible 'limit' variable in a Service Bundle

Нам нужен способ передать название вновь предоставленной виртуальной машины в шаблон задания Ansible Tower в качестве переменной «ограничения», так что конфигурация применяется исключительно к новой виртуальной машине. В нашем примере мы предлагаем пользователю имя виртуальной машины из диалога службы при заказе службы, и поэтому имя виртуальной машины будет известно заранее. Это не всегда может быть так; Например, мы можем автоматически генерировать наши собственные имена виртуальных машин.

Как мы обнаружили в ссылке: ../ ANSIBLE_TOWER_SERVICES/gupt.asciidoc [Ansible Tower Services], как _default_, так и __provision_from_bundle__ Состояние экземпляры машины вызовывают метод _preprovision_, который позволяет необязательно изменять параметры задания, отправленные на Tower. Мы будем использовать этот объект, чтобы добавить наш собственный код, который перемещается, хотя структура объекта для извлечения значения `: vm_target_name` из HASH Options в предыдущей операции VM Provisioning. Используя это значение для нашей переменной «ограничения», мы гарантируем, что переключатель ограничения шаблона задания устанавливается правильно (и автоматически), независимо от того, как было создано имя виртуальной машины.


Наш код будет искать ServiceTemplateProvisionTask с атрибутом `provision_priority` на один меньше, чем у нас. Найдя этот «предыдущий» ServiceTemplateProvisionTask, он затем будет следовать за ассоциациями через свои задачи (ы) ребенка и внука, чтобы найти варианты хэша. (См. Также ссылку: ../ the_service_provisioning_state_machine/gupt.asciidoc [машина для обеспечения службы] и ссылка: ../ service_objects/grab.asciidoc [Объекты службы] для описания этих объектов). Путь навигации показан в << i7 >>.

{zwsp} +
[[i7]]
.
image::images/objects.png[Screenshot,700,align="center"]
{zwsp} +

===== Preparation

Мы клонируем __/ConfigurationManagement/AnsibleTheower/Service/Provisioning/StateMachines/Provision/Provision_FROM_BUNDLE__ MATCHE В наш собственный домен и заменим метод :: PREPVORISION *LINE BY *MEDICE :: PREPROVISION_FROM_BUNDLE *, как следующее:

[[i8]]
.Modified provision_from_bundle State Machine
image::images/ss7.jpg[Screenshot,700,align="center"]
{zwsp} +

Теперь мы скопируем метод __/configurationManagement/ansibletower/service/provisioning/statemachines/provision/preprovision__ в нашем домене, переименовать его как __preprovision_from_bundle__ и отредактировать его следующим образом.

Мы добавим новый метод `prior_service_vm_names`, который выполняет навигацию вокруг объектов модели службы. Код заключается в следующем:

[source,ruby]
----
def prior_service_vm_names
vm_names = []
Если не задают .provision_priority.zero?
prior_task = task.miq_request_task.miq_request_tasks.find do | miq_request_task |
miq_request_task.provision_priority == task.provision_priority - 1
конец
Если не предварительный_task.nil?
prior_task.miq_request_tasks.each do | Child_task |
child_task.miq_request_tasks.each do | Grandchild_task |
vm_names << grandchild_task.get_option (: vm_target_name)
конец
конец
конец
конец
vm_names
конец
----

Мы отредактируем метод `modify_job_options` для вызова` wared_service_vm_names`, следующим образом:

[source,ruby]
----
def modify_job_options (служба)
job_options = service.job_options
Limit_names = prior_service_vm_names
job_options [: limit] = Limit_names.join (","), если только Limit_names.empty?
service.job_options = job_options
конец
----

Наконец, мы расстроены призыв к `modify_job_options` в методе` main ', следующим образом:

[source,ruby]
----
def Main
@harder.log («Информация», «Начало предварительной предварительной передачи башни»)
examine_request (служба)
modify_job_options (служба)
конец
----

==== Ordering the Catalog Bundle

Мы можем заказать наш новый пакет из каталога веб-выпуска самообслуживания (см. << i10 >>).

[[i10]]
. Self-Service Webui Каталог услуг
image::images/ss10.png[Screenshot,550,align="center"]
{zwsp} +

Мы увидим новый диалог услуг, который мы завершаем подходящие значения, и добавим в корзину покупки (см. << i9 >>).

[[i9]]
. Заказвание пакета каталога
image::images/ss9.png[Screenshot,600,align="center"]
{zwsp} +

Когда мы * заказываем * содержимое корзины корзины, начинается запрос на предоставление виртуальной машины. После того, как это завершит Ansible, запрос на работу передается в башню, и мы можем следовать прогрессу нашей работы в Tower Webui. Мы видим, что ограниченный переключатель был правильно установлен в соответствии с именем виртуальной машины, обнаруженным нашим методом __preprovision_from_bundle__ (см. << i11 >>).

[[i11]]
. Аннулирующие результаты работы
image::images/ss11.png[Screenshot,600,align="center"]
{zwsp} +

=== Summary

Эти практические примеры показали относительную простоту, с которой мы можем создавать CloudForms или Manageiq Services, которые запускают задачи конфигурации Ansible Tower. Мы видели, как мы можем объединить службу обеспечения для общей виртуальной машины с службой конфигурации, которая превращает виртуальную машину в определенную роль сервера.

При создании сервисных связков мы часто соединяем VM Supision с элементами каталога конфигурации Ansible и даже формируем пакеты из нескольких из этих пар. Модифицированный метод __preprovision_from_bundle__, который мы создали, всегда пересылает имя виртуальной машины из непосредственного предварительного обеспечения виртуальной машины в башню. Пока мы правильно настраиваем порядок предоставления при добавлении ресурсов в комплект, мы можем быть уверены, что предельная переменная будет установлена ​​по мере необходимости, и что конфигурация будет применена к самой последней предварительно предоставленной виртуальной машине.
