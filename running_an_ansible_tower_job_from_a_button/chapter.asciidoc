[[running-an-ansible-tower-job-from-a-button]]
== Запуск работы Ansible Tower с кнопки

В предыдущей главе мы увидели, как интегрировать Ansible в наши автоматические рабочие процессы. В этой главе мы рассмотрим, как мы запускаем Ansible Work Semplates из кнопки, без какого -либо кодирования Ruby.

=== Ansible Tower Preparation

Мы должны сделать некоторую начальную подготовку на нашем Ansible Tower Server, создать инвентаризацию и учетные данные машины, а затем определить динамический инвентарь, который заполняется на нашем устройстве CloudForms. Как только они подготовлены, мы можем установить проект и создать шаблон работы.

==== Inventory Credential

На нашем сервере Ansible Tower мы создадим учетные данные * Red Hat CloudForms *, который позволяет нам синхронизировать инвентаризацию из нашего прибора CloudForms или Manageiq (см. << i1 >>). Мы будем использовать это, чтобы гарантировать, что инвентарь башни будет актуально, прежде чем будет запущен какой-либо шаблон работы.

[[i1]]
. INVENTORY DELIGENT
image::images/ss1.png[Screenshot,600,align="center"]
{zwsp} +

==== Machine Credential

Мы также создадим учетные данные * машины * под названием * SSH-ключ (ANSIBLE-REMOTE) *, который позволяет SSH-подключению на основе ключа с управляемым хостом в качестве пользователя Ansible-Remote, и допускает привилегированную эскалацию SUDO в качестве пользователя root.

==== Inventory

Мы создадим инвентарь башни под названием * CloudForms VMS * для сохранения списка виртуальных машин, которые видны для CloudForms. Мы добавим группу к этому под названием *All Servers *, которая использует наши учетные данные CloudForms для заполнения себя. Мы также должны убедиться, что эта группа помечена как * перезапись * и * обновление о запуске * (см. << i2 >>).

[[i2]]
. INVENTORY GROUP
image::images/ss2.png[Screenshot,650,align="center"]
{zwsp} +

==== Installing the Project and Creating the Job Template

После того, как мы настроем учетные данные и инвентарь, мы готовы создать наш проект и создать шаблон работы из одной из ролей.

===== Project

Хорошо создать новый проект GIT из репозитория https://github.com/pemcg/ansible_playbooks (Master Branch).

===== Job Template

Из этого нового проекта мы создадим шаблон работы под названием *Simple Lamp Stack *. Это будет * запуск * тип работы; Используйте * CloudForms VMS * Inventory и * SSH-ключ (ANSIBLE-REMOTE) * Учетные данные машины, которые мы определили ранее, и выполнит Playbook Playbook Project yaml__ Project __LAMP_SIMPLE.yaml__ (см. << i3 >>).

[[i3]]
.Job Шаблон
image::images/ss3.png[Screenshot,700,align="center"]
{zwsp} +

Поскольку несколько команд Playbook требуют привилегий ROOT, мы должны убедиться, что * включение эскалации привилегий * проверяется (см. << i4 >>).

[[i4]]
. Привилегия
image::images/ss4.png[Screenshot,250,align="center"]
{zwsp} +

CloudForms 4.2/Manageiq _euwe_ Теперь требует, чтобы флажок * Подсказка * запустил *, чтобы быть отмеченным для элемента * Limit * (см. << i5 >>). Когда мы отправляем запрос на задание из CloudForms/Manageiq, ограниченный коммутатор используется для передачи имени хоста или списка, разделенных запятыми, для выполнения задания.

[[i5]]
.Ssting intry при запуске для элемента лимита
image::images/ss11.png[Screenshot,250,align="center"]
{zwsp} +

Мы определим некоторые значения по умолчанию для дополнительных переменных, которые будут переданы в пьесу:

* ntpserver (IP -адрес NTP -сервера)
* mysql_port (порт будет использоваться MariaDB)
* dbname (начальное имя базы данных)
* dbuser (начальная база данных имени пользователя)
* DBPass (пароль для начального пользователя базы данных)
* http_port (http port, который будет использоваться Apache)
* Repository (URL-адрес репозитория GIT на сайт предварительной загрузки)

Мы также должны убедиться, что запуск * запуска * проверяется, чтобы переменные были переопределены из CloudForms/Manageiq, если мы желаем (см. << i6 >>).

[[i6]]
.Default дополнительные переменные
image::images/ss5.png[Screenshot,500,align="center"]
{zwsp} +

=== CloudForms/ManageIQ Preparation

У нас есть гораздо меньше подготовки к нашему прибору CloudForms или Manageiq. Нам просто нужно импортировать диалог услуг и добавить кнопку.

==== Service Dialog and Button

Когда мы создали шаблон работы в башне, поставщик Ansible автоматически обновил список доступных шаблонов заданий в веб -Webui CloudForms/Manageiq, а также дополнительные переменные по умолчанию, определенные для каждого. Мы можем выбрать любой из этих шаблонов заданий и автоматически создать из него диалог услуг.

Для нашего примера мы выбираем шаблон задания * Simple Lamp *, затем выберите * Configuration -> Создать диалог службы из этого шаблона задания * (см. << i7 >>).

[[i7]]
. Шаблон задания стопа с лампами в CloudForms
image::images/ss6.png[Screenshot,700,align="center"]
{zwsp} +

Мы дадим новым диалоговом сроком службы название «простой стек лампы», чтобы мы могли идентифицировать его как исходящее из шаблона работы. Нам нужно внести некоторые незначительные изменения в диалоговом окне, поэтому мы перемещаемся на *Automate -> «Настройка» *В WebUI найти вновь созданный диалог в разделе *Dialogs *Service *и нажмите «Конфигурация» -> Изменить этот диалог *. Мы можем удалить поле «Параметры» * и его * ограниченный * элемент, так как нам не нужно вручную указывать их, когда мы вызовываем шаблон задания с кнопкой. Мы также отредактируем каждый элемент, чтобы отменить флажок «Читать только» (см. << i8 >>).

[NOTE]
====
Обратите внимание, что имена элементов диалога службы создаются по умолчанию с помощью префикса «param_», чтобы их можно было распознавать как дополнительные переменные с помощью метода __launch_ansible_job__, который мы обсуждали в ссылке: ../ Tower_related_automate_components/gace.asciidoc [Tower, связанные с автоматизациями].
====

[[i8]]
. Redited Service Dialog
image::images/ss7.png[Screenshot,400,align="center"]
{zwsp} +

Создав диалоговое окно, мы можем добавить кнопку в нашу группу кнопок виртуальной машины, если мы захотим. Наша кнопка будет использовать новый диалог «Simple Lamp Stack» и вызовет экземпляр __ansible_tower_job, как показано в << i9 >>.

[[i9]]
. Выдвигая кнопку
image::images/ss8.png[Screenshot,500,align="center"]
{zwsp} +

=== Ordering the LAMP Stack from the Button

Мы готовы проверить работу Ansible Playbook, называемой CloudForms/Manageiq. Мы выберем подходящую VM Centos 7, которая была настроена с помощью пользователя Ansible-Remote пользователя и SSH-клавиши, а также заказ из кнопки «Simple Lamp Stack *» (см. << i10 >>).

[[i10]]
. Выдвигая кнопку
image::images/ss10.png[Screenshot,400,align="center"]
{zwsp} +

Мы заполняем параметры диалога; В этом случае мы переопределим значения по умолчанию для * ntpserver * и * dbname * (см. << i11 >>).

[[i11]]
. Заказ кнопки
image::images/ss9.png[Screenshot,500,align="center"]
{zwsp} +

Если мы перейдем к серверу Tower и посмотрим на детали задания, мы увидим работу успешного работа:

```
Идентификация добавлена:/tmp/ansible_tower_yd0ibd/createnty (/tmp/ansible_tower_yd0ibd/createnty)
Пароль хранилища:

Воспроизвести [настроить сервер с помощью простого стека ламп] *****************************

Задача [настройка] *****************************************************
ОК: [LAMPSRV001]

Задача [lamp_simple: установить NTP] ***************
Изменено: [Lampsrv001]

...


Управляющий обработчиком [LAMP_SIMPLE: перезапустить NTP] ***********************************************
Изменено: [Lampsrv001]

Управляющий обработчиком [LAMP_SIMPLE: перезапустить MariaDB] ********************************************
Изменено: [Lampsrv001]

Играть в резюме *************************************************
LAMPSRV001: OK = 21 Изменен = 20 НЕИСПРАВНОСТЬ = 0 Не удалось = 0
```

Если мы запустим веб -браузер и перейдем к URL -адресу сервера Centos 7, мы видим, что наши файлы _index.html_ и _index.php_ были заполнены, как и ожидалось. Успех!

=== Summary

В этой главе показано, как мы можем запустить задание Ansible Tower с кнопки в CloudForms или Manageiq Webui. Мы можем переопределить любое из значений по умолчанию для шаблона задания.

Эта тесная интеграция между Tower и CloudForms/Manageiq дает нам огромную гибкость в способности использовать мощность Ansible из CloudForms или Manageiq и расширяет наши возможности автоматизации помимо локальных методов Ruby.
