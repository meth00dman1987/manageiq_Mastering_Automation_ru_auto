[[approval]]
== утверждение

Недавно предоставленная виртуальная машина потребляет ресурсы в виртуальной инфраструктуре и потенциально стоит деньги в общедоступном облаке. Чтобы контролировать потребление ресурсов и контролировать затраты на облако, в виртуальную машину и экземпляр обеспечивает стадию одобрения. По умолчанию запросы на отдельные малые виртуальные машины являются автоматическими одобрениями, но попытки предоставить большие или несколько виртуальных машин перенаправлены для административного одобрения.

В этой главе описывается процесс утверждения и показывает, как мы можем точно настроить пороговые значения одобрения на основе количества виртуальных машин, количества процессоров или объема памяти в запросе.

=== Approval Workflow

Рабочие процессы одобрения запроса на положения запускаются с помощью * request_created * и * request_pending * событий (см. << i5 >>).

[[i5]]
.EVENT-инициализированный
image::images/approval_workflow.png[Screenshot,350,align="center"]
{zwsp} +

==== Request Created Event

Рабочий процесс утверждения для запроса о предоставлении виртуальной машины вводится в результате _/System/Policy/MiqProvisionRequest_created_ Экземпляр политики, запускающегося из события * request_created *. Этот экземпляр политики содержит два отношения, *rel5 *и *rel6 *.

Соотношение * rel5 * выполняет поиск профиля группы, чтобы прочитать значение атрибута * auto_approval_state_machine *, который по умолчанию по умолчанию _provisionRequestApproval_ для виртуальной машины инфраструктуры или запроса о предоставлении экземпляра облачного экземпляра.

Отношение * rel6 * выполняет экземпляр _default_ этой машины состояния (см. << i1 >>).

[[i1]]
. ProvisionRequestApproval State Machine Accestances и Methodances
image::images/ss1.png[Screenshot,350,align="center"]
{zwsp} +

В экземпляре _default_ у машины состояния ProvisionRequestApproval есть значения поля, показанные в << i2 >>.

[[i2]]
.The ProvisionRequestApproval/Default instance
image::images/ss2.png[Screenshot,700,align="center"]
{zwsp} +

Этот экземпляр автоматически одобрит любой запрос на предоставление виртуальной машины, содержащий одну виртуальную машину, но запросы на большее количество этого числа потребуют явного одобрения со стороны администратора или всех в группе с роли * evmrole-arvover * (или эквивалент).

==== Methods

Машина состояния ProvisionRequestApproval использует три метода для выполнения проверки.

===== validate_request

Метод _validate_Request_ запускается из * поля * в поле * valyateRequest *. Он проверяет запрос на подготовку к схеме * max_ * атрибуты, и если запрос не превышает эти максимумы, метод выходит чисто. Если запрос превышает максимумы, метод устанавливает `$ evm.root ['ae_result'] = 'ошибка» и сообщение о причинах перед выходом.

===== pending_request

Метод _pending_request_ запускается из поля * on orsor * состояния * valyateRequest *. Это будет запущено, если _validate_request_ выходит с `$ evm.root ['ae_result'] = 'error'. Метод прост, и просто поднимает событие * request_pending * для запуска _miqprovisionrequest_pending_ Экземпляр политики:

[source,ruby]
----
# Повышение события автоматизации: request_pending
$ evm.root ["miq_request"]. В ожидании
----

===== approve_request
Метод _PARPOVE_REQUEST_ запускается из поля * на входе * состояния * ApprovereQuest *. Это будет запущено, если _validate_request_ выйдет чисто. Это еще один очень простой метод, который просто одобряет запрос:

[source,ruby]
----
# Автоподобный запрос
$ evm.log («Информация», «Автоматическое одобрение»)
$ evm.root ["miq_request"].
----
==== Request Pending Event

Если машина _ProvisionRequestApproval_ не одобряет запрос, она вызывает `$ evm.root [" miq_request "]. В ожидании ', которое запускает событие A * request_pending *. Это триггерная точка во второй рабочий процесс через экземпляр политики _miqprovisionRequest_pending_. Этот экземпляр отправляет электронные письма на запрашивателя и утверждающего, уведомляя, что запрос о предоставлении не был автоматически одобрен, и требует ручного одобрения.

=== Overriding the Defaults

Мы можем скопировать экземпляр _default_ (включая путь) в наш собственный домен и изменить или установить любой из атрибутов схемы автозадобства, то есть ** max_cpus **, ** max_vms **,*max_memory*или ** max_retirement_days **. Затем наши новые значения будут использоваться при обеспечении следующей виртуальной машины.

==== Template Tagging

Мы также можем переопределить автоматическое одобрение ** MAX _ *** Значения, хранящиеся в машине _ProvisionRequestAproval_ на основе состояния на шаблоне, применяя теги из одной или нескольких из следующих категорий тегов к шаблону:

[options="header"]
|=======================
| Имя категории тегов | Отображение категории тегов
| prov_max_cpu | Авто одобрение - MAX CPU
| prov_max_memory | Авто одобрение - максимальная память
| prov_max_retirement_days | Авто одобрение - максимальные пенсионные дни
| prov_max_vm | Авто одобрение - Max VM
|=======================

Если шаблон помечен таким образом, то любой запрос на предоставление виртуальной машины _from_, что шаблон приведет к тому, что значение тега шаблона будет использоваться для соображений автопробения, а не значения атрибута со схемы.

=== VM Provisioning-Related Email

Существует четыре экземпляра электронной почты с соответствующими методами, которые используются для обработки отправки электронных писем, связанных с подготовкой виртуальной машины. Каждый из экземпляров имеет атрибуты ** to_email_address **,*from_email_address*и*подпись*, которые мы можем (и должны) настроить, после копирования экземпляров в наш собственный домен.

[[i4]]
.Copying and Редактирование поля схемы по электронной почте одобрения
image::images/ss3.png[scale="50"]
{zwsp} +

Три случая связаны с одобрением. Значение * to_email_address * для экземпляра _miqprovisionrequest_pending_ должно содержать адрес электронной почты пользователя (или список рассылки), который может войти в прибор Manageiq как администратор или как член группы с ролевой или эквивалентом * Evmrole * (см. << i4 >>).

=== Summary

В этой главе показано, как рабочий процесс, обеспечивающий виртуальную машину, позволяет этап одобрения для фильтрации запросов на крупные виртуальные машины, в то время как автоматически одобряющие небольшие запросы. Это значительно упрощает нашу жизнь как администраторов виртуализации. Это позволяет нам сохранить определенную степень контроля над большими запросами ресурсов, даже позволяя нам определить нашу собственную концепцию «большой», установив соответствующие атрибуты схемы. Это также позволяет нам делегировать ответственность за небольшие запросы на виртуальные машины нашим стандартным пользователям. Автоматизация позволяет нам вмешиваться в исключительные случаи, но автоматически одобряет обычные запросы «как обычно».

Мы также видели, как мы можем точно настроить эти пороговые значения одобрения на основе графика, так что, если у некоторых из наших пользователей есть веские основания для предоставления больших виртуальных машин из определенных шаблонов, мы можем позволить им без прерывания.

Машина состояния одобрения и методы являются хорошим примером утилиты определения теголдов как атрибутов схемы или с использованием тегов. Мы можем настроить процесс утверждения на наши собственные требования без необходимости писать или редактировать какой -либо код Ruby.
