[[approval-and-quota]]
== Утверждение и квота

Мы обнаружили в ссылке: ../ provisioning_proval/gupt.asciidoc [утверждение предоставления] и ссылка: ../ provisioning_quota_management/gupt.asciidoc [управление квотой подготовки], что процесс обеспечения виртуальной машины включает в себя этап одобрения - чтобы позволить администраторам опционально утверждать большие запросы VM -образные управления или к кводки, которые применяются к цитатам, которые применяются к Quatats, или к кводки, которые применяются к Quata Catats, чтобы получить квалификации, которые применяются к Quata Catats. Мы также узнали, что эти рабочие процессы были запускаются из _miqprovisionRequest_created_ и _miqprovisionrequest_starting_ Actesments. Однако, когда мы создаем виртуальную машину из элемента каталога сервиса, наш объект запроса отличается, поэтому мы не можем полагаться на существующие триггеры рабочего процесса одобрения и квот.

В этой главе рассматриваются рабочие процессы одобрения и квот, когда мы предоставляем виртуальную машину из каталога услуг.

=== Triggering Events

Когда мы заказываем новую виртуальную машину из каталога услуг, наш запрос по -прежнему должен быть утвержден и сопоставлен с нашей нынешней квотой арендатора или группы. Как и при обеспечении виртуальной машины, каждый из соответствующих рабочих процессов предоставления услуг запускается * событиями * request_created * и * request_proved *, но тип объекта запроса отличается. Сейчас это служба_template_provision_request.

=== Approval

Процесс утверждения для запроса о предоставлении услуг начинается с экземпляра _/system/policy/servicetemplateProvisionRequest_created_ запускается в результате события * request_created *. Этот экземпляр содержит два отношения, *rel5 *и *rel6 *.

Соотношение * rel5 * выполняет поиск профиля услуги, чтобы прочитать значение атрибута * auto_proval_state_machine *, который по умолчанию по умолчанию _serviceprovisionrequestproval_ для запроса предоставления услуг.

Отношение * rel6 * запускает экземпляр _default_ этой машины состояния.

[[i1]]
.ServiceProvisionRequestEpploval Apploval State Matchan и методы
image::images/ss2.png[Screenshot,350,align="center"]
{zwsp} +

Схема для машины _serviceProvisionRequestApproval/default_ State показана в << i2 >>.

[[i2]]
.Fields of ServiceProvisionRequestApproval/Match
image::images/ss1.png[Screenshot,450,align="center"]
{zwsp} +

Методы _Pending_Request_ и _Pavove_Request_ такие же, как и их аналоги для одобрения виртуальной машины. Значение по умолчанию _validate_request_ ничего не делает, поэтому этот экземпляр машины штата автоматически одобрит все запросы на предоставление услуг.

==== Customising Approval

Если универсальное автоматическое одобрение не является необходимым поведением, мы можем скопировать методы _serviceProvisionRequestApproval/default_ State Matchine в наш собственный домен и редактировать их по мере необходимости. Сноска: [Ник Кэтлинг из Red Hat написал хороший пример того, как мы можем настроить одобрение предоставления услуг на основе для групп, если мы захотим. Код доступен в его репозитории GitHub: https://github.com/supernoodz/cloudforms/tree/master/pploval]

=== Quota

Проверка квот для запроса о предоставлении услуг использует тот же консолидированный механизм квот, что и описано в ссылке: ../ provisioning_quota_management/gupt.asciidoc [Управление квотой обеспечения]. Процесс проверки квот для запроса о предоставлении услуг начинается с того, что экземпляр _/system/policy/servicemplateProvisionRequest_starting_ запускается в результате события * request_starting *. Этот экземпляр политики запускает _/system/commonmethods/Quatastatemachine/Quata_ State Machine из его * Rel2 *.

==== Email

В Manageiq нет экземпляров электронной почты, которые обрабатывают отправку услуги «Одобрение отказано/ожидают» и «квота превышены». Мы должны были бы самостоятельно реализовать эту функциональность, если мы хотим отправить такие электронные письма.

CloudForms предоставляет подходящие экземпляры электронной почты в домене RedHat, но по умолчанию они не подключены к каким -либо экземплярам политики. Если мы хотим их использовать, мы можем добавить экземпляр политики под названием __/System/Policy/ServiceMemplateProvisionRequest_denied__ в наш собственный домен. Это должно содержать отношение к __/service/provisioning/email/serviceTemplateProvisionRequest_denied__ электронная почта
экземпляр в домене Redhat.

=== Summary

Мы видели, как механизм одобрения и проверки квот для услуг отражает, что для виртуальных машин, но использует различные экземпляры политики для запуска рабочих процессов. Удобный рабочий процесс утверждает, что одобряет все запросы на обслуживание, но мы можем скопировать экземпляр в нашу собственную домен, чтобы настроить поведение, если мы пожелаем.

На практике нам редко нужно настроить эти рабочие процессы. Как администраторы виртуализации, когда мы предоставляем каталог самообслуживания для наших пользователей, мы обычно принимаем делегирование контроля и степень ответственности, которую мы передаем нашим пользователям. В конце концов, это одно из многих преимуществ внедрения инфраструктуры в качестве модели облака услуг. Мы почти наверняка распределяем квоты, но нам редко необходимо внедрить одобрение на за кадр. Поведение по умолчанию автоматического одобрения всех запросов на обслуживание действителено в большинстве ситуаций.

