[preface]
== Предисловие

Red Hat Cloudforms и его «восходящие» сестры управляют и сестрами являются мощными платформами облака, которые позволяют нам эффективно управлять нашей виртуальной инфраструктурой и инфраструктурой в качестве облаков услуги (IAAS). Значительная часть этой эффективности заключается в автоматизации многих повседневных задач, которые в противном случае потребовали бы ручного участия, или трудоемких и, возможно, склонных к ошибкам повторяющихся шагов.

Эта книга представляет собой введение и руководство по работе с функцией _Automate_ CloudForms 4.2 и соответствующим выпуском Manageiq _euwe_.

Автоматизация упрощает нашу жизнь и повышает нашу эксплуатационную эффективность. Это позволяет нам делать такие вещи, как:

* Устранение многих ручных решений и операций, связанных с обеспечением виртуальных машин и облачных экземпляров.
* Баланс нагрузки Наши виртуальные машины по всей нашей виртуальной инфраструктуре, чтобы соответствовать способу работы нашей организации, будь то логично (например, центр затрат, отдел), операционная (например, среда жизненного цикла инфраструктуры) или категориальная (например, роль сервера или характеристика виртуальной машины).
* Создайте каталоги услуг, чтобы позволить нашим пользователям предоставлять виртуальные машины с одной кнопкой _order_.
* Создайте автоматические облачные приложения, где новые виртуальные машины динамически предоставляются по требованию.
* Управляйте нашим полным жизненным циклом виртуальной машины.
* Интегрируйте наш рабочий процесс обеспечения виртуальной машины с более широким предприятием, например, автоматически регистрируя новые виртуальные машины со стороны спутникового сервера Red Hat.
* Реализуйте интеллектуальные рабочие процессы пенсионных процессов виртуальной машины, которые отменяют ресурсы, такие как IP-адреса, и нерегистрация от служб каталогов.

=== A Brief Word on Terminology

Эта книга относится к _automate_ как к возможностям CloudForms или Manageiq или функции продукта, а также _Automation_ как то, что позволяет нам автоматизировать. _Automation Engine_ позволяет нам создавать интеллектуальные рабочие процессы автоматизации и запустить _automation scripts_, написанные в Ruby или Ansible Playbooks.

=== Who Should Read This Book

Эта книга понравится администраторам облачных или виртуализации, которые заинтересованы в автоматизации частей их виртуальной инфраструктуры или облачных вычислений. Несмотря на то, что в основном нацелены на тех, кто знаком с CloudForms или Manageiq, многие из концепций и терминов, таких как _orchestration_ и _automation Workflows_, будут легко поняты даже тем, кто не знаком с продуктом.

Автомат может быть одним из наиболее сложных аспектов инструментов для освоения. Практикующий требует необычной сочетания навыков; Знакомство с традиционными «инфраструктурными» концепциями, такими как виртуальные машины, гипервизоры и сети арендаторов, а также стиль для сценариев в Ruby и мастерство модели объекта программирования. Однако нет черной магии, и все навыки могут быть изучены, если нам покажут путь.

Книга предполагает разумный уровень компетентности с рубиновым языком со стороны читателя. Существует много хороших онлайн-учебных пособий Ruby, в том числе Codecademy's http://www.codecademy.com/tracks/ruby® для программы в Ruby].

Книга также предполагает удобный уровень опыта работы и знакомства функций веб -пользовательского интерфейса (WebUI), которые либо CloudForms, либо Manageiq, в частности, Insight, Control, Tagging и Provision VMS через ** LifeCycle -> Provision VMS ** Точка записи. Многие из этих функций будут автоматизированы, когда мы следуем примерам в книге, и поэтому полезно понимание того, почему тегирование полезно (например).

[NOTE]
Как CloudForms, так и Manageiq являются веб-приложениями, поэтому взаимодействие преимущественно через WebUI на основе браузера. Мы используем терминал командной строки только тогда, когда первоначально настраиваем устройство CloudForms, или при устранении неполадок или проверки журналов.

=== Navigating This Book

Книга разделена на семь частей.

==== Part I "Working With Automate"

Глава 1: _introduction to CloudForms и Manageiq_, устанавливает сцену и описывает возможности CloudForms и Manageiq как платформы управления облаком.

Глава 2, _introduction в автоматизация данных DataStore_, выводит нас в экскурсию по объектам, с которыми мы работаем, когда используем возможности автоматизации CloudForms и Manageiq.

Глава 3, _Writing и запуск наших собственных автоматических сценариев_, знакомит нас с написанием сценариев автоматизации в Ruby, с простым «Привет, мир!» пример.

Глава 4, _using схемы переменных_, показывает, как мы можем использовать схему нашего экземпляра для хранения и получения переменных.

Глава 5, _working с виртуальными машинами_, демонстрирует, как работать с объектом виртуального машины автоматизации и как запустить сценарий автоматизации с пользовательской кнопки в интерфейсе веб -пользователя.

Глава 6, _peeping в Hood_, представляет некоторую теорию фона о Rails _Models_ и о том, как CloudForms и Manageiq абстрагируют их как _service models_, с которыми мы работаем, когда пишем наши сценарии автоматизации.

Глава 7, _ $ evm и The Workspace_, выводит нас в экскурсию по полезным методам `$ evm`, которые мы часто используем при сценарии, такие как` $ evm.vmdb` и `$ evm.object`.

Глава 8, _a Практический пример: обеспечение соблюдения правил анти-аффинности_, ​​является реальным примером полноцветного фильма о том, как мы могли бы использовать методы, изученные до сих пор для внедрения правил анти-аффинности в нашей виртуальной инфраструктуре, основанных на тегах.

Глава 9, _using Tags из Automate_, подробно описывает, как мы можем создавать, назначать, читать и работать с тегами из наших сценариев Automation.

Глава 10, _investigative Debugging_, обсуждает, как мы можем выяснить, какие объекты доступны нам при сценарии. Это полезно как с точки зрения расследования при разработке сценариев, но и для отладки наших сценариев, когда что -то не работает, как и ожидалось.

Глава 11, _ways ofing automate_, показывает нам различные точки ввода рабочего процесса в автоматизированное хранилище данных. Это также иллюстрирует, как мы можем программно определять, как был вызван нашим скриптом автоматизации, что позволяет нам создавать повторные сценарии.

Глава 12, _Requests and Tasks_, иллюстрирует, как больше расширенных операций автоматизации разделены на этап _request_, который требует административного утверждения для прогресса на этап _task_. Соответствующие объекты запроса и задачи описаны, и их использование сравнивается.

Глава 13, _state Machines_, знакомит нас с государственными машинами, и как мы можем использовать их для разумной последовательности наших рабочих процессов.

Глава 14, _ МОРНАЯ ПРЕДОСТАВЛЕННАЯ СХЕМА и ЧЕЛОВЕКИ ЭНТЕРСОВОГО ЧЕЛОВЕКА_, обсуждается более продвинутые, но реже используемые схемы и функции экземпляра; Сообщения, утверждения, коллекции и экземпляр .missing.

Глава 15, _EVENT Processing_, описывает, как CloudForms и Manageiq реагируют на внешние события, такие как выключение виртуальной машины, и прослеживает последовательность обработки событий через автоматическое хранилище данных. Он также показывает, как Automate управляет собственными внутренними событиями, такими как `request_started`.

==== Part II "Provisioning Virtual Machines"

Глава 16, _provision Airtual Machine_, представляет концепцию обеспечения виртуальной машины, самой сложной операции автоматизации, выполняемой CloudForms и Manageiq.

Глава 17, _ The Provisioning Profile_, описывает, как ссылается профиль подготовки для определения начальной групповой обработки, которая выполняется в начале операции обеспечения виртуальной машины.

Глава 18, _PAPPORVAL_, показывает, как работает рабочий процесс одобрения и как мы можем регулировать критерии автоматического одобрения, такие как количество виртуальных машин, которые подлежат предоставлению, или объем хранения, в соответствии с нашими потребностями.

Глава 19, _quota Management_, рассказывает подробности механизма обработки квот CloudForms и Manageiq, и о том, как он позволяет нам устанавливать квоты для арендаторов или групп.

Глава 20, _ Опции HASH_, объясняет важность структуры данных, называемой _options hash_, и как мы можем использовать его для извлечения и хранения переменных для настройки операции по обеспечению виртуальной машины.

Глава 21, _ The Provisioning State Machine_, обсуждает этапы на государственной машине, которая регулирует последовательность операций, связанных с обеспечением виртуальной машины.

Глава 22, _Customising Virtual Machine Provisioning_, является практическим примером, показывающим, как мы можем настроить статусную машину и включить наши собственные методы, чтобы добавить второй жесткий диск во время операции обеспечения виртуальной машины.

Глава 23, _virtual machine именование во время Provisioning_, объясняет, как мы можем настроить логику _naming_, которая определяет имя, данное вновь предоставленной виртуальной машине.

Глава 24, _Virtual Machine Machine во время Provisioning_, объясняет, как мы можем настроить логику _placement_, которая определяет местоположение хоста, кластера и данных для данных для нашей недавно предоставленной виртуальной машины.

Глава 25, _ The Provisioning Dialog_, описывает диалоги Webui, которые приводят к приглашению на параметры, которые требуются до того, как может быть предоставлена ​​новая виртуальная машина. В главе также объясняется, как диалоги могут быть настроены для расширения дополнительных диапазонов для элементов, таких как размер памяти, или для представления диалога с ограниченным на заказ определенным группам пользователей.

Глава 26, _Virtual Machine Provisioning Objects_, подробно описывает четыре основных объекта, с которыми мы работаем, когда пишем Ruby Scripts, чтобы взаимодействовать с процессом обеспечения виртуальной машины.

Глава 27, _creating requestions Provisioning Programmaly_, показывает, как мы можем инициировать операцию по обеспечению виртуальной машины из сценария автоматизации вместо интерфейса веб -пользователя.

==== Part III "Automation using Ansible Tower"

Глава 28, _Automation с использованием ANSIBLE_, вводит некоторые Ansible Concepts и описывает функции башни, которые мы используем при автоматизации с использованием Ansible, таких как запасы, роли и шаблоны работы.

Глава 29, _toverse Automate Components_, описывает автоматические компоненты данных и модели обслуживания, которые используются при использовании Ansible для задач автоматизации.

Глава 30, _Running Ansible Tower Work с Button_, является практическим примером создания шаблона задания на сервере Ansible Tower, а затем запуск его на виртуальной машине с кнопки WebUI в CloudForms.
Глава 31, _integrating со спутником 6 во время Provisioning_, является примером, показывающим, как можно использовать Ansible Playbook для регистрации недавно созданной виртуальной машины с помощью Red Hat Satellte 6, либо в качестве _host_ или _content host_ (или оба).

==== Part IV "Working with Services"

Глава 32, _service Dialogs_, представляет компоненты, которые составляют диалог _service, включая элементы, которые могут быть динамически заполнены методами Ruby.

Глава 33, _ Служба, обеспечивающая государство Machine_, обсуждает этапы на государственной машине, которая регулирует последовательность операций, связанных с созданием услуги.

Глава 34, _catalog {item, bundle} инициализация_, описывает два конкретных экземпляра машины состояния услуг, которые были разработаны для упрощения процесса создания каталога услуг _items_ и _bundles_.

Глава 35, _ одобрение и квота_, показывает рабочий процесс утверждения для услуг и то, как новый механизм обработки квот также применяется к услугам.

Глава 36, _creating a Cataloge Cataloge Atem_, является практическим примером, показывающим, как создать элемент каталога услуг для предоставления виртуальной машины.

Глава 37, _creating a Service Catalog Bundle_, является практическим примером, показывающим, как создать пакет каталога услуг из трех виртуальных машин.

Глава 38, _Assible Tower Services_, описывает компоненты автоматизации данных и модели сервисов, которые используются при создании сервисов, которые запускают шаблоны рабочих мест Ansible Tower.

Глава 39, _creating a Ansible Tower Service Cataloge и Bundle_, иллюстрирует, как создать пакет каталога обслуживания, который обеспечивает новую виртуальную машину, и впоследствии запускает его шаблон работы башни для настройки компонентов программного обеспечения лампы.

Глава 40, _service Objects_, представляет собой разоблачение различных объектов, которые работают за кулисами, когда предоставляется элемент каталога услуг.

Глава 41, _log-анализ во время предоставления услуг, представляет собой пошаговую прогулку, отслеживая строки, записанные на _automation.log_ на разных этапах операции по предоставлению услуг. Это может помочь наше понимание нескольких уровней происходящей одновременной активности машин состояния.

Глава 42, _service иерархии_, иллюстрирует, как услуги могут содержать другие услуги, и мы можем организовать наши сервисные группы в иерархии для организационного и удобства управления.

Глава 43, _service Reconfiguration_, описывает, как мы можем создавать реконфигурируемые услуги. Они способны принимать параметры конфигурации во время заказа через диалоговое окно службы, а впоследствии могут быть перенастроены с помощью новых параметров конфигурации через тот же диалог службы.

Глава 44, _service Tips and Chriecs_, упоминает некоторые полезные советы, которые следует помнить при разработке услуг.

==== Part V "Retirement"

Глава 45, _Virtual Machine и экземплярный пенсионер, обсуждает процесс выхода на пенсию для виртуальных машин и экземпляров.

Глава 46, _service пенсионер_, обсуждает процесс выхода на пенсию для услуг.

==== Part VI "Integration"

Глава 47, _calling Automate из Restful API_, показывает, как мы можем сделать внешние вызовы _into_ CloudForms или Manageiq для запуска экземпляров автоматизации через API Restful. Мы также можем вернуть результаты нашему абоненту таким образом, позволяя нам создать наши собственные конечные точки Pseudo-API на двух платформах.

Глава 48, _automation запрос Appraval_, объясняет, как настроить поведение по умолчанию по умолчанию для запросов на автоматизацию, чтобы неадминистраторы могли отправлять запросы API Restful без необходимости административного утверждения.

Глава 49, _calling External Services_, показывают различные способы позвонить _out_ из автоматизации для интеграции с нашим более широким предприятием. Это включает в себя изготовление исходящих вызовов для отдыха и мыла, подключение к базам данных MySQL и взаимодействие с OpenStack с использованием GEM _FOG_.

==== Part VII "Miscellaneous" 

Глава 50, _tency and Automate_, описывает модель аренды CloudForms/Manageiq и то, как нам иногда нужно адаптировать наши сценарии автоматизации для работы с концепцией аренды.

Глава 51, _distributed Automation обработка_, описывает, как Automate был разработан, чтобы быть горизонтально масштабируемым. В главе описывается механизм, с помощью которого запросы на автоматизацию распределяются между несколькими приборами в регионе.

Глава 52, _Argument Передача и обработка_, объясняет, как аргументы передаются и обрабатываются внутренне методами автоматизации для каждого из различных способов, которые мы называли им до этого момента в книге.

Глава 53, _miscelly tips_, закрывает книгу с помощью некоторых полезных советов по разработке автоматизации метода.

=== Online Resources

Существует несколько онлайн -ресурсов, о которых должен знать любой студент CloudForms или Manageiq Automate.

==== Official Documentation

Официальная документация для CloudForms здесь: https://access.redhat.com/documentation/en/red-hat-cloudforms/
 
Официальная документация по управлению здесь: http://manageiq.org/documentation/

==== Code Repositories

Одним из лучших источников справочного материала является превосходная коллекция кодов _cloudforms_essentials_, поддерживаемая Кевином Морей из Red Hat (https://github.com/ramrexx/cloudforms_essentials). Это содержит множество полезных образцов кода, и многие из примеров в этой книге произошли из этого источника.

Существует также очень полезный консалтинг Red Hat (https://github.com/rhtconsulting) github, поддерживаемый несколькими консультантами Red Hat.

==== Fora

Проект Manageiq проводит форум _manageiq talk_ по адресу http://talk.manageiq.org

==== Blogs

Есть несколько блогов, которые имеют хорошие облачные формы и статьи, связанные с управлением, включая некоторые полезные _notes из Field_. К ним относятся:

* CloudForms сейчас (http://cloudformsblog.redhat.com/)

* Блог Кристиана (http://www.jung-christian.de)

* Laurent Domb OSS Blog (http://blog.domb.net/)

* Все открывается (http://allthingsopen.com/)

* Tigeriq (http://www.tigeriq.co/)

=== Conventions Used in This Book
////
Дайте мне знать, если вам нужно отредактировать этот раздел.
////
В этой книге используются следующие типографские соглашения:

_Italic_ :: Указывает новые термины, URL -адреса, адреса электронной почты, имена файлов, имена пути и имена объектов в автоматическом хранилище данных, значения поля схемы

*Bold*:: Указывает компоненты WebUI, имена событий, имена поля схемы

+Постоянная ширина+:: используется для списков программ, а также в параграфах для ссылки на такие элементы программы, как имена переменной или функций, базы данных, типы данных, переменные среды, операторы и ключевые слова.

** `Постоянная ширина Bold` ** :: Показывает команды или другой текст, который должен быть напечатан буквально пользователем.

_ ++ Постоянная ширина Italic ++ _ :: Показывает текст, который следует заменить на поставленные пользователем значения или значениями, определяемыми контекстом.

[NOTE]
====
Этот значок означает общую ноту.
====

[TIP]
====
Эта икона означает наконечник или предложение
====

[WARNING]
====
Этот значок указывает предупреждение или осторожность.
====







