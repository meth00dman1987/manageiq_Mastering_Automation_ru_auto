[[integrating-with-satellite-6-during-provisioning]]
== Интеграция со спутником 6 во время обеспечения

Это довольно распространенное требование, чтобы зарегистрировать вновь предоставленные виртуальные машины Red Hat Enterprise Linux непосредственно со спутником 6 в рамках процесса обеспечения. Это гарантирует, что результирующая виртуальная машина исправлена ​​и актуальна, и, необязательно настроен Puppet в соответствии с роли сервера.

В этой главе описываются шаги, связанные с адаптацией рабочего процесса обеспечения, так что виртуальные машины Red Hat автоматически зарегистрированы на спутнике 6 в конце операции по обеспечению. Мы запустим шаблон рабочих мест Ansible Tower от нашей государственной машины для выполнения регистрации. Этот простой вариант использования демонстрирует возможность CloudForms и Manageiq до _integrate_ с нашим более широким предприятием.

=== Hosts and Content Hosts

Спутник 6.2 имеет два разных типа записи хоста. Мы можем добавить сервер в качестве _content host_, который связывает одну или несколько подписок Red Hat с сервером и предоставляет доступным контент репозитория программного обеспечения. Мы также можем добавить новую систему в качестве простой _host_, которая регистрирует сервер в качестве клиента по обеспечению и управлению конфигурацией, управляемой куколкой.

Если мы просто хотим добавить недавно предоставленную систему в качестве хоста контента, мы используем инструмент *+подписка-Manager+ * на новой виртуальной машине для регистрации на спутнике. Если мы хотим добавить недавно предоставленную систему в качестве хоста -хоста _and_ Content, мы можем использовать новый скрипт _bootstrap.py_, который поставляется со спутником 6.2.

=== Satellite 6 Preparation

Нам нужно сделать некоторую подготовку на нашем спутниковом сервере. Чтобы сохранить пример простым, мы будем работать только с Red Hat Enterprise Linux 7, и мы создадим несколько общих групп хоста и клавиши активации в спутнике, которые мы можем использовать.

==== Host Groups

Мы создадим несколько простых групп хоста на спутнике 6 (см. << i1 >>).

[[i1]]
.Satellite 6.2 Группы хозяев
image::images/ss1.png[Screenshot,550,align="center"]
{zwsp} +

Хотя группы хостов будут определять значения по умолчанию для архитектуры, операционной системы, носителя, таблицы раздела, домена и корневого пароля, они не будут влиять на недавно зарегистрированную виртуальную машину, поскольку они являются параметрами, используемыми во время Kickstart. Группы хостов, однако, будут определять марионеточную среду, которую вновь прикрепленный спутниковый клиент будет использовать для конфигурации. Группа __generic_rhel7_servers__ установит модули марионеток _motd_ и _ntp_.

'''
.Ansable _and_ Puppet?
****
В этом примере мы будем использовать двух поставщиков управления конфигурацией; Ansible Tower и Satellite 6. Каждый имеет свой собственный инструмент управления конфигурацией: Tower использует Ansible, тогда как в спутнике 6.2 используется марионетка. Каждый инструмент имеет свои сильные стороны (и страстные защитники), и, хотя в их возможностях существует определенная степень совпадения, использование обоих вместе часто является действительным выбором в современном предприятии.
****
'''

==== Activation Keys

Чтобы зарегистрировать недавно предоставленную систему со спутником в качестве _content host_, мы можем включить имя ключа активации в качестве аргумента для *+подписки-Manager+ * или сценарий _bootstrap.py_. Ключ активации определяет среду жизненного цикла, представление контента, подписки Red Hat и наборы контента репозитория, к которым обладает вновь зарегистрированный сервер. Может быть полезно для создания клавиш активации для различных типов сервера, которые требуют определенных комбинаций репозитории продукта.

Мы создадим небольшой выбор клавиш активации в спутнике 6 (см. << i2 >>).

[[i2]]
.Satellite 6.2 Ключи активации
image::images/ss2.png[Screenshot,500,align="center"]
{zwsp} +

Для этого примера будет использоваться ключ активации * rhel7-generic *. Спутниковый клиент будет:

* Быть назначенным для * RHEL 7.2 Q4 2016 * Просмотр контента в * Производственной * среде жизненного цикла
* Подано подписке на корпоративную Red Hat
* Включены следующие хранилища контента продукта:
** Red Hat Enterprise Linux 7 Server (RPMS)
** Red Hat Enterprise Linux 7 Server - RH Common (RPMS)
** Спутниковые инструменты Red Hat 6.2 (для сервера RHEL 7) (RPMS)
** Модули Puppetforge

=== Ansible Tower Preparation

Мы должны сделать некоторую подготовку на нашем сервере Ansible Tower.

==== Inventory 

Мы будем использовать те же учетные данные и инвентаризацию, что и в ссылке: ../ Running_an_ansible_tower_job_from_a_button/gupt.asciidoc [работа с ванной работой с кнопки].

==== Machine Credential

Мы внесем небольшое изменение в клавиш * SSH (Ansible-Remote) * учетные данные машины. Мы добавим пароль Vault для файла Vault, в котором мы сохраним пароль пользователя Admin Satellite 6. После расшифровки это будет использоваться для переменной Playbook `vault_admin_pass`.

==== Job Template

В рамках проекта, который мы создали в ссылке: ../ running_an_ansible_tower_job_from_a_button/gupt.asciidoc [запустить задание Ansible Tower из кнопки], мы создадим шаблон работы под названием *Satellite 6 Client *. Это будет * запуск * тип работы; Используйте VMS * CloudForms VMS * Inventory и * SSH-ключ (ANSIBLE-REMOTE) * Учетные данные машины, которые мы определили ранее, и выполнит Playbook Playbook Project __satellite_client.yaml__ (см. << i5 >>).

[[i5]]
.Job Шаблон
image::images/ss5.png[Screenshot,700,align="center"]
{zwsp} +

Мы определим некоторые значения по умолчанию для дополнительных переменных, которые будут переданы в пьесу:

* SAT6_IP (IP -адрес STELLITE 6 SERVER)
* SAT6_FQDN (STELLITE 6 SERVER Полное доменное имя)
* admin_user (пользователь на уровне администратора для регистрации со спутником 6)
* Организация (Satellite 6 организация для присоединения)
* Местоположение (спутник 6 место для присоединения)
* GOSTGROUP (STELLITE 6 Configuration HosteGroup для использования, или «false» для конфигурации марионеток)
* ActivationKey (ключ активации спутника 6)
* UpdateHost ('true' или 'false')

Мы также должны убедиться, что запуск * запуска * проверяется, чтобы переменные были переопределены из CloudForms/Manageiq, если мы желаем (см. << i7 >>).

[[i7]]
.Default дополнительные переменные
image::images/ss7.png[Screenshot,350,align="center"]
{zwsp} +

В этой игре используется дополнительная переменная под названием `admin_pass`. Значение для этого должно храниться в виде зашифрованной строки, и поэтому мы определили ее в файле хранилища как зашифрованную переменную `vault_admin_pass`. Мы можем создать это, используя следующие команды на сервере Tower:

....
su - awx
CD/var/lib/awx/projects/<project_dir>/role/satellite_client/group_vars/all
Ansible-Vault Create Vault
Новый пароль хранилища:
Подтвердите пароль нового хранилища:
vault_admin_pass: secret_password
~
~
~
....

Затем мы добавляем пароль хранилища в учетные данные машины, которые мы создали ранее.

[NOTE]
====
Добавление нашего собственного локального файла хранилища в каталог проектов не позволит проекту чистое выполнение обновления SCM, если мы не включим опцию проекта «Чистые» обновления SCM.
====

=== CloudForms/ManageIQ Preparation

Мы также должны сделать некоторую подготовку наших облачных форм или устройств управления.

==== cloud-init Customization Template

Нам нужен наша недавно предоставленная виртуальная машина, которая будет настроена как управляемый хост Ansible, поэтому мы будем использовать шаблон Cloud-INIT, описанный в Link: ../ Automation_using_Ansible/gupt.asciidoc [Автоматизация с использованием ansible]. Мы указам этот шаблон в диалоговом окне «Подготовка», когда мы предоставим нашу виртуальную машину.

==== Service Dialog and Button

Прежде чем мы интегрируем новый Playbook в наш рабочий процесс, обеспечивающий виртуальную машину, полезно иметь возможность проверить его функциональность с кнопки на объекте VM, как мы это делали в ссылке: ../ Running_an_ansible_tower_job_from_a_button/gupt.asciidoc [выполнение задания Ansible Tower из кнопки]. Это позволит нам устранить их работу, а также добавит полезную функциональность в нашу группу кнопок, связанную с VM.

Еще раз мы создадим диалог услуг из шаблона работы Ansible. Мы дадим новую службу диалога названия «Спутниковое 6 клиент», чтобы мы могли идентифицировать его как исходящее из шаблона работы. Мы можем удалить поле «Параметры» * и его * Limit * Element, как и раньше, и на этот раз мы также отредактируем элемент * HOSTGROUP *, чтобы изменить «T» на «true» и разбить флажок «Читать только». Точно так же мы отредактируем элемент * UpdateHost *, чтобы изменить «f» на «false».

Создав диалог, мы можем добавить кнопку в нашу группу кнопок виртуальной машины. Наша кнопка будет использовать новый диалог "Satellite 6 Client" и вызовет экземпляр ANSIBL_TOWER_JOB.

После определения мы можем использовать эту кнопку для проверки интеграции с Ansible Tower.

[[i13]]
.Button добавлен в группу кнопок
image::images/ss13.png[Screenshot,450,align="center"]
{zwsp} +

==== JobTemplate Instance

Мы клонируем класс _/configurationmangemange/ansiblethower/operations/jobtemplate_ в нашем домене и добавим новый экземпляр этого класса с именем _satellite_6_client_. Мы добавим значение «Спутниковое 6 клиент» в качестве имени шаблона задания, и для нашего первого теста мы оставим все поля * Param * пустыми. Не передавая ни один из этих параметров в башню, мы гарантируем, что шаблон задачи по умолчанию, которые используются для работы по умолчанию, используются для работы.

[[i10]]
.Fields of Satellite_6_Client
image::images/ss10.png[Screenshot,600,align="center"]
{zwsp} +

==== register_satellite

Мы хотим зарегистрировать новую виртуальную машину с помощью нашего сервера Satellite 6, если он работает за управление операционной системой Red Hat Enterprise Linux (RHEL). К счастью, мы можем использовать свойство шаблона под названием «operating_system.distribution», чтобы определить, является ли наш шаблон истинным RHEL, клон (например, CentOS), или другое распределение или операционную систему.

[NOTE]
====
Мы должны запустить анализ SmartState на всех наших шаблонах для свойства `operating_system.distribution` для заполнения.
====

Мы создадим новый класс _/Integration/Satellite/Ansiblemethods_ в нашем домене и новый экземпляр этого класса под названием _register_satellite_. Мы можем поместить утверждение в нашем экземпляре _register_satellite_, чтобы оценить свойство `operating_system.distribution` и сравнить его со строкой« redhat ». Выполнение шаблона работы Ansible будет продолжаться только в том случае, если это утверждение оценится на `true '.

Схема _register_satellite_ показана в << i11 >>.

[[i11]]
.Fields от экземпляра Register_satellite
image::images/ss11.png[Screenshot,700,align="center"]
{zwsp} +

==== Modify the Provisioning Workflow

Мы должны добавить дополнительное состояние в схему машины _vmprovision_vm_ в какой -то момент после того, как виртуальная машина была подготовлена, называемой *Registersatellite *. Мы отредактируем клонированную копию экземпляра _template_ этой машины состояния в нашем домене, чтобы добавить наш экземпляр _/интеграция/спутники/ansiblemethods/register_satellite_ в состояние * registersatellite * (см. << i12 >>).

[[i12]]
.Fields of VmProvision_VM/Template State Canem
image::images/ss12.png[Screenshot,700,align="center"]
{zwsp} +

=== Testing the Integration

Мы проверим изменения интеграции, которые мы сделали тремя способами.

==== Test 1 - Registering a RHEL 7.2 Server for Content Management

Наш первый тест - предоставить новую виртуальную машину RHEL 7 под названием «RALSRV001», а также зарегистрироваться на спутнике 6 исключительно для управления контентом пакета. Мы будем использовать полностью подготовленный шаблон «Fat» RHEL 7.2, который называется «RHEL72-Generic» в качестве нашего источника для обеспечения, и мы выберем * тип * типа * из «родного клона». Шаблон имеет установлен и настроенный пакет Cloud-INIT.

Чтобы гарантировать, что новый сервер автоматически предоставляется в качестве управляемого хоста Ansible, мы выберем * Setup для Ansible Tower Management * Scloud-INIT Script на вкладке * Настроить * диалоговое окно «Предоставление» (см. << I16 >>).

[[i16]]
. Выбор шаблона в облаке
image::images/ss16.png[Screenshot,800,align="center"]
{zwsp} +

Мы также заполним поля * root password * и * host *, так как эти значения передаются в сценарий облака в облаке (см. << i15 >>).

[[i15]]
. КОНСПЕРТИТЕЛЬНАЯ ТАБА
image::images/ss15.png[Screenshot,550,align="center"]
{zwsp} +

Отсутствие каких -либо переопределенных параметров в нашем начальном экземпляре _Satellite_6_Client_ означает, что будет использоваться значение «false» для * хост -группы *. Когда это значение передается в Ansible Playbook, сервер зарегистрирован со спутником 6 в качестве хоста контента, использующего *+подписку-Manager+ *.

Если мы рассмотрим _Automation.log_, пока сервер обеспечивает, мы увидим, что наше утверждение оценивается с * true *, а также называется шаблон задачи:

```
Оценка замещенного утверждения ["redhat" == "redhat"]
Q-task_id ([miq_provision_183]) Следующая связь [miqaedb: \
/Configurationalmange/ansibletower/operations/jobtemplate/satellite_6_client#create]
```

На сервере Tower мы можем увидеть прогресс работы:

```
Идентификация добавлена:/tmp/ansible_tower_xemhte/createnty (/tmp/ansible_tower_xemhte/createnty)
Пароль хранилища:

Играть [все] *******************************************************

Задача [настройка] *******************************************************
ОК: [RALSRV001]

Задача [Satellite_Client: обходной путь для не работающих DNS] *******************
Изменено: [Ralsrv001]

Задача [Satellite_Client: загрузка bootstrap.py с Satellite01.bit63.net] *****
Пропуск: [Ralsrv001]

Задача [Satellite_Client: Скопировать сценарий bootstrap.py до/usr/local/sbin и сделать его исполняемым] ***
Пропуск: [Ralsrv001]

Задача [Satellite_Client: зарегистрируйтесь на спутнике 6 с включенной Puppet и добавьте его в правильную группу хост] ***
Пропуск: [Ralsrv001]

Задача [Satellite_Client: Установите Katello-Ca-Consumer-latest.noarch.rpm из Satellite01.bit63.net] ***
Изменено: [Ralsrv001]

Задача [Satellite_Client: зарегистрируйтесь на спутнике 6 только для контента] ***********
Изменено: [Ralsrv001]

Задача [Satellite_Client: установите katello-agent] **************************************************
Изменено: [Ralsrv001]

Задача [Satellite_Client: Обновите хост до последних ошибок в прикрепленном представлении контента] ***
Изменено: [Ralsrv001]

Управляющий обработчиком [Satellite_Client: Start Katell-Agent] *********************
ОК: [RALSRV001]

Управляющий обработчик [Satellite_Client: включить katell-agent] *************************************************
ОК: [RALSRV001]

Играть в резюме *************************************************
ralsrv001: ok = 8 изменено = 5 недостатков = 0 не удалось = 0
```

Мы видим, что пьеса завершилась успешно, и что задачи, связанные с начальной загрузкой, были пропущены. Новый сервер зарегистрирован в Satellite 6 в качестве хоста контента.

==== Test 2 - Registering a RHEL 7.2 Server for both Content and Configuration Management

Для этого теста мы предоставим еще одну виртуальную машину RHEL 7.2 (называемый «RALSRV002»), также из шаблона «RHEL72-Генера». Мы будем использовать те же настройки диалога обеспечения, что и раньше.

Перед тем, как начать процесс обеспечения, однако, мы отредактируем экземпляр __satellite_6_client__, чтобы добавить значение для Param1. Мы собираемся переопределить дополнительную переменную «хост-группа» по умолчанию и передать значение «generic_rhel7-servers» (см. << i18 >>).

[[i18]]
. Контент -хозяин в спутнике 6
image::images/ss18.png[Screenshot,800,align="center"]
{zwsp} +

Если мы следим за процессом обеспечения в _automation.log_, мы снова увидим, как наше утверждение оценивает *истинную *, и называется шаблон работы. На сервере Tower мы можем следовать прогрессу работы:

```
Идентификация добавлена:/tmp/ansible_tower_nzafzi/createnty (/tmp/ansible_tower_nzafzi/createnty)
Пароль хранилища:

Играть [все] *******************************************************

Задача [настройка] *******************************************************
ОК: [RALSRV002]

Задача [Satellite_Client: обходной путь для не работающих DNS] *******************
Изменено: [Ralsrv002]

Задача [Satellite_Client: загрузка bootstrap.py с Satellite01.bit63.net] *****
Изменено: [Ralsrv002]

Задача [Satellite_Client: Скопировать сценарий bootstrap.py до/usr/local/sbin и сделать его исполняемым] ***
Изменено: [Ralsrv002]

Задача [Satellite_Client: зарегистрируйтесь на спутнике 6 с включенной Puppet и добавьте его в правильную группу хост] ***
Изменено: [Ralsrv002]

Задача [Satellite_Client: Установите Katello-Ca-Consumer-latest.noarch.rpm из Satellite01.bit63.net] ***
Пропуск: [RALSRV002]

Задача [Satellite_Client: зарегистрируйтесь на спутнике 6 только для контента] ***********
Пропуск: [RALSRV002]

Задача [Satellite_Client: установите katello-agent] **************************************************
Пропуск: [RALSRV002]

Задача [Satellite_Client: Обновите хост до последних ошибок в прикрепленном представлении контента] ***
Изменено: [Ralsrv002]

Играть в резюме *************************************************
ralsrv002: ok = 6 изменено = 5 недостатков = 0 не удалось = 0
```

На этот раз мы видим, что сценарий _bootstrap.py_ был скопирован на недавно предоставленный сервер и использовался для регистрации хоста в качестве хоста контента и кукольного клиента.

На спутнике мы видим, что два новых хозяина добавлены. Мы можем убедиться, что второй хост, RALSRV02 был добавлен в группу хоста "Generic_RHEL7_SERVERS", и имеет назначенную марионеточную среду "kt_bit63_production_rhel_7_2_Q4_2016_9" (см. << I19 >>).

[[i19]]
.New Hosts добавлены в спутниковую инвентаризацию
image::images/ss19.png[Screenshot,800,align="center"]
{zwsp} +

==== Test 3 - Provisioning a CentOS 7.2 Server

Чтобы подтвердить работу нашего утверждения в экземпляре __gegister_satellite__ При обеспечении сервера не RHEL, мы предоставим сервер Centos 7.2 из шаблона «Fat».

Если мы следуем за прогрессом обеспечения в _automation.log_, мы увидим, что утверждение оценивается на *false *, и наш общий шаблон труда не называется.

```
Оценка замещенного утверждения ["centos" == "redhat"]
Q-task_id ([[miq_provision_184])
```
=== Summary

В этой главе показано, как мы можем интегрировать наш рабочий процесс обеспечения виртуальной машины с нашим более широким предприятием, в этом случае зарегистрировав новые виртуальные машины на сервере Satellite 6. Это также иллюстрирует, как мы можем динамически включить или блокировать состояния в нашем рабочем процессе в зависимости от атрибутов, которые мы можем проверить на использование утверждения.


